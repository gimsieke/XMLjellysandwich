<?xml version="1.0" encoding="UTF-8"?>
<xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                xmlns:xs="http://www.w3.org/2001/XMLSchema"
                xmlns:xjs="http://github.com/wendellpiez/XMLjellysandwich"
                xmlns:ixsl="http://saxonica.com/ns/interactiveXSLT"
                xmlns:xlink="http://www.w3.org/1999/xlink"
                xmlns:ali="http://www.niso.org/schemas/ali/1.0/"
                version="3.0"
                extension-element-prefixes="ixsl">
  
   <xsl:template name="xmljellysandwich_fetch"><!-- Target page components by assigning transformation results to them via their IDs. -->
     <xsl:result-document href="#xmljellysandwich_css">
       <xsl:call-template name="css"/>
     </xsl:result-document>
     <xsl:result-document href="#xmljellysandwich_body">
       <xsl:apply-templates/>
     </xsl:result-document>
   </xsl:template>
  
  
   <xsl:template match="book-meta"/>
  
   <xsl:template match="book | book-body | book-part | book-part-meta | title-group | body">
     <xsl:apply-templates/>
   </xsl:template>
  
   <xsl:template match="title">
     <h2>
       <xsl:apply-templates/>
     </h2>
   </xsl:template>
  
  <xsl:template match="p">
    <p class="p">
      <xsl:apply-templates/>
    </p>
  </xsl:template>
  <xsl:template match="italic">
    <i class="italic">
      <xsl:apply-templates/>
    </i>
  </xsl:template>
  <xsl:template match="statement//italic">
    <span class="emphasis">
      <xsl:apply-templates/>
    </span>
  </xsl:template>
  <xsl:template match="sup">
    <sup class="sup">
      <xsl:apply-templates/>
    </sup>
  </xsl:template>
  <xsl:template match="underline">
    <u class="underline">
      <xsl:apply-templates/>
    </u>
  </xsl:template>
  
  
  <xsl:template match="sec">
    <div class="sec" id="{generate-id(.)}">
      <xsl:apply-templates/>
    </div>
  </xsl:template>
  <xsl:template match="list">
    <div class="plain-list">
      <xsl:apply-templates select="title"/>
      <ul>
        <xsl:apply-templates select="list-item"/>
      </ul>
    </div>
  </xsl:template>
  <xsl:template match="list[@list-type='ordered']">
    <div class="ordered-list">
      <xsl:apply-templates select="title"/>
      <ol>
        <xsl:apply-templates select="list-item"/>
      </ol>
    </div>
  </xsl:template>
  <xsl:template match="list-item">
    <li class="list-item">
      <xsl:apply-templates/>
    </li>
  </xsl:template>
  <xsl:template match="disp-quote">
    <div class="disp-quote {@content-type}">
      <xsl:apply-templates/>
    </div>
  </xsl:template>
  <xsl:template match="statement">
    <xsl:variable name="next" select="(/descendant::statement[1] | following::statement[1])[last()]"/>
    <div class="statement">
      <xsl:apply-templates/>
    </div>
    <!--<div class="statement epigram" id="{generate-id(.)}"
       onclick="hop('{generate-id(.)}','{generate-id($next)}','on');">
       <xsl:if test="not(preceding::statement)">
         <xsl:attribute name="class">statement epigram on</xsl:attribute>
       </xsl:if>
       <xsl:apply-templates/>
     </div>-->
  </xsl:template>
  
  
  
  <!-- 'sleepy' autogenerated templates -->
  
   
   <xsl:template mode="asleep" match="book">
      <div class="book">
         <xsl:apply-templates/>
      </div>
   </xsl:template>
   <xsl:template mode="asleep" match="book-meta">
      <div class="book-meta">
         <xsl:apply-templates/>
      </div>
   </xsl:template>
   <xsl:template mode="asleep" match="book-title-group">
      <div class="book-title-group">
         <xsl:apply-templates/>
      </div>
   </xsl:template>
   <xsl:template mode="asleep" match="contrib-group">
      <div class="contrib-group">
         <xsl:apply-templates/>
      </div>
   </xsl:template>
   <xsl:template mode="asleep" match="contrib">
      <div class="contrib">
         <xsl:apply-templates/>
      </div>
   </xsl:template>
   <xsl:template mode="asleep" match="permissions">
      <div class="permissions">
         <xsl:apply-templates/>
      </div>
   </xsl:template>
   <xsl:template mode="asleep" match="license">
      <div class="license">
         <xsl:apply-templates/>
      </div>
   </xsl:template>
   <xsl:template mode="asleep" match="book-body">
      <div class="book-body">
         <xsl:apply-templates/>
      </div>
   </xsl:template>
   <xsl:template mode="asleep" match="book-part">
      <div class="book-part">
         <xsl:apply-templates/>
      </div>
   </xsl:template>
   <xsl:template mode="asleep" match="book-part-meta">
      <div class="book-part-meta">
         <xsl:apply-templates/>
      </div>
   </xsl:template>
   <xsl:template mode="asleep" match="title-group">
      <div class="title-group">
         <xsl:apply-templates/>
      </div>
   </xsl:template>
   <xsl:template mode="asleep" match="body">
      <div class="body">
         <xsl:apply-templates/>
      </div>
   </xsl:template>
   <xsl:template mode="asleep" match="sec">
      <div class="sec">
         <xsl:apply-templates/>
      </div>
   </xsl:template>
   <xsl:template mode="asleep" match="list">
      <div class="list">
         <xsl:apply-templates/>
      </div>
   </xsl:template>
   <xsl:template mode="asleep" match="list-item">
      <div class="list-item">
         <xsl:apply-templates/>
      </div>
   </xsl:template>
   <xsl:template mode="asleep" match="disp-quote">
      <div class="disp-quote">
         <xsl:apply-templates/>
      </div>
   </xsl:template>
   <xsl:template mode="asleep" match="statement">
      <div class="statement">
         <xsl:apply-templates/>
      </div>
   </xsl:template>
   <xsl:template mode="asleep" match="book-title">
      <p class="book-title">
         <xsl:apply-templates/>
      </p>
   </xsl:template>
   <xsl:template mode="asleep" match="string-name">
      <p class="string-name">
         <xsl:apply-templates/>
      </p>
   </xsl:template>
   <xsl:template mode="asleep" match="email">
      <p class="email">
         <xsl:apply-templates/>
      </p>
   </xsl:template>
   <xsl:template mode="asleep" match="copyright-statement">
      <p class="copyright-statement">
         <xsl:apply-templates/>
      </p>
   </xsl:template>
   <xsl:template mode="asleep" match="copyright-year">
      <p class="copyright-year">
         <xsl:apply-templates/>
      </p>
   </xsl:template>
   <xsl:template mode="asleep" match="copyright-holder">
      <p class="copyright-holder">
         <xsl:apply-templates/>
      </p>
   </xsl:template>
   <xsl:template mode="asleep" match="ali:license_ref">
      <p class="ali:license_ref">
         <xsl:apply-templates/>
      </p>
   </xsl:template>
   <xsl:template mode="asleep" match="license-p">
      <p class="license-p">
         <xsl:apply-templates/>
      </p>
   </xsl:template>
   <xsl:template mode="asleep" match="title">
      <p class="title">
         <xsl:apply-templates/>
      </p>
   </xsl:template>
   
  <xsl:template name="css">
      <style type="text/css">
html, body { font-size: 10pt }
div { margin-left: 1rem }
.tag { color: green; font-family: sans-serif; font-size: 80%; font-weight: bold }


.book { }

.book-meta { }

.book-title-group { }

.book-title { }

.contrib-group { }

.contrib { }

.string-name { }

.email { }

.permissions { }

.copyright-statement { }

.copyright-year { }

.copyright-holder { }

.license { }

.ali:license_ref { }

.license-p { }

.book-body { }

.book-part { }

.book-part-meta { }

.title-group { }

.title { }

.body { }

.sec { }

.p { }

.italic {  display: inline; }

.list { }

.list-item { }

.disp-quote { }

.sup {  display: inline; }

.statement { }

.underline {  display: inline; }

.statement .emphasis { font-style: normal }


.disp-quote.vernacular { color: inherit; font-size:90%; font-style: italic;
background-color: inherit; padding: 0em  }
.vernacular i, .vernacular .italic { font-style: normal }


.statement { margin-left: 0em; font-style: italic;
border-top: thin solid grey; border-bottom: thin solid grey;
padding: 1em 0.25em; margin: 0.5em 0em }

.statement i, .statement .italic { font-style: normal }
.statement p { text-indent: 0em }

</style>
   </xsl:template>
  
  
   <xsl:template priority="-0.4"
                 match="book | book-meta | book-title-group | contrib-group | contrib | permissions | license | book-body | book-part | book-part-meta | title-group | body | sec | list | list-item | disp-quote | statement">
      <div class="{name()}">
         <div class="tag">
            <xsl:value-of select="name()"/>: </div>
         <xsl:apply-templates/>
      </div>
   </xsl:template>
   <xsl:template priority="-0.4"
                 match="book-title | string-name | email | copyright-statement | copyright-year | copyright-holder | ali:license_ref | license-p | title | p">
      <p class="{name()}">
         <span class="tag">
            <xsl:value-of select="name()"/>: </span>
         <xsl:apply-templates/>
      </p>
   </xsl:template>
   <xsl:template priority="-0.4" match="italic | sup | underline">
      <span class="{name()}">
         <span class="tag">
            <xsl:value-of select="name()"/>: </span>
         <xsl:apply-templates/>
      </span>
   </xsl:template>
   
  <xsl:function name="xjs:classes">
      <xsl:param name="who" as="element()"/>
      <xsl:sequence select="tokenize($who/@class, '\s+') ! lower-case(.)"/>
   </xsl:function>
   <xsl:function name="xjs:has-class">
      <xsl:param name="who" as="element()"/>
      <xsl:param name="ilk" as="xs:string"/>
      <xsl:sequence select="$ilk = xjs:classes($who)"/>
   </xsl:function>
</xsl:stylesheet>
