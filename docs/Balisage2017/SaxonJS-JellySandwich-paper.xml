<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="balisage-proceedings-html.xsl"?>
<?xml-stylesheet type="text/css" href="../../../../Documents/Balisage/lib/balisage-author.css" title="Forms interface" alternate="no"?>
<?xml-model href="../../../../Documents/Balisage/lib/balisage-1-3.rng" type="application/xml" schematypens="http://relaxng.org/ns/structure/1.0"?>
<article xmlns="http://docbook.org/ns/docbook" version="5.0-subset Balisage-1.3"
  xml:id="Balisage2017Piez01" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <title>Interactive web applications demonstrating SaxonJS</title>
  <info>
    <abstract>
      <para>SaxonJS promises “real” XSLT in the browser. Old-timers are thrilled, cool kids are
        showing interest, and many people are very intrigued. The architecture is still
        characterized by a strong distinction between logical and presentation layers, but it is now
        possible to program user interaction in the browser as event-driven transformation logic,
        using XSLT alone. The unit of composition (the “work”) now corresponds to the unit of
        delivery (no longer a “page” but a “resource”). Most importantly, it is now possible to
        build and deploy interactive web sites with XML and XSLT alone -- no Java, no Javascript, no
        specialized server app or complex batch processing. But to deploy, you need a web server, a
        compiled XSLT stylesheet, and a certain amount of infrastructure. XML Jelly Sandwich, a
        starter XSLT hosted on GitHub, can provide infrastructure of sufficient quality for
        testing.</para>
    </abstract>
    <author>
      <personname>
        <firstname>Wendell</firstname>
        <surname>Piez</surname>
      </personname>
      <personblurb>
        <para>Wendell Piez is an independent consultant specializing in XML and XSLT, based in
          Rockville MD.</para>
      </personblurb>
    </author>
    
  </info>
  <note>
    <para>Sections of this article were presented as conference slides. Here, some of them are
      altered or expanded into prose, while others are merely touched (slightly amended or
      embellished). For the slides, <link xmlns:xlink="http://www.w3.org/1999/xlink"
        xlink:href="https://wendellpiez.github.io/XMLjellysandwich/Balisage2017/balisage2017-slides.html"
        >see Github.io</link> or link above.</para>
  </note>
  <section>
    <title>Context</title>
    <section>
      <title>Old promise, new realization</title>
      <para>XSLT was originally designed with client-side processing in mind</para>
      <para>This never (quite) happened or did it? with XSLT 1.0<itemizedlist>
          <listitem>
            <para>Yes, you can (sort of) get it to work ...</para>
          </listitem>
        </itemizedlist></para>
      <para>Impediments to this effort<itemizedlist>
          <listitem>
            <para>No API or runtime interface to XSLT execution</para>
          </listitem>
          <listitem>
            <para>Considerable limitations of XSLT 1.0</para>
          </listitem>
        </itemizedlist></para>
      <para>At long last, Saxonica offers a solution that addresses both problems</para>
      <para>Background / context / problem: (lack of) business case for exposing XML (what?)</para>
    </section>
    <section>
      <title>The web is dead</title>
      <para>I don't actually think the web is dead. However, I think our ideas about what the web
        is, or should be, have changed and in many ways we have been disappointed. Certain hopes
        regarding the web are dead, while we have barely begun to think about the fullest
        implications of a worldwide publishing platform that is only too prone to fragmentation and
        misuse. Yet at the same time, there is nevertheless unrealized potential, if not for the web
        as a whole (which has been “designed” by no one) then for us as users of it. I think the web
        as we know it has been compromised by a few issues, both economic and architectural-structural:<itemizedlist>
          <listitem>
            <para>The predominant advertising-supported business model has offered (some measure of)
              economic viability (or its promise) to ventures on the web, at the cost of “noise” in
              the browser; there is no such thing as a “safe space” on the web. Paradoxically, all
              the activity makes getting through to an audience harder than ever (to say nothing of
              reaching and serving them).</para>
          </listitem>
          <listitem>
            <para>This has combined with the way in which the layered architecture (CSS over HTML
              over data stores, with tightly bound Javascript application logic maintained in
              libraries) – abstracted into the most minimal layers for viability – has had the
              effect of equalizing production values across the economic and institutional spectrum.
              The New York Times looks like anyone's spoof of the New York Times (and neither of
              them actually looks very good). Especially when either one is seen through the lens of
              Facebook. One result is a collapse in authority. Everyone is a hacker, it's only a
              question of who's paying the check.</para>
          </listitem>
          <listitem>
            <para>Consequently, in a flattened world, indexing becomes everything, and page ranking
              (and its equivalents) become surrogates for actual attention. Link counting and page
              hit analysis substitute for contact and responsiveness between parties in
              communication, “producers” and “consumers” of information. (Even these terms for what
              used to be thought of as “readers” and “writers” suggest a kind of alienation, in
              which both of these roles have become commoditized.)</para>
            <para>Thus as “consumers”, bots and crawlers are more important than people (because
              they produce the indexes that are presented to people), who have become objects of
              second-hand interest.</para>
          </listitem>
          <listitem>
            <para>Markets on a common Internet platform tend naturally toward monopoly, each sector
              being dominated by a single “provider” (to use more alienated and generalized
              language) with only edges of the market left to others; this is can be true even in
              the quasi-gift economy of Open Source, in which reputation becomes currency, and
              reputation is achieved by altruism (the gift of time and expertise) or its semblance
              (which may indeed result only from network effects - i.e. real benefits, but created
              by the community not the innovator). This centralization, of both economic and
              “imaginative” domains, is arguably bad for “culture” in the broadest sense. (This is a
              problem with mass media off the Internet as well, but it is especially bad on the
              web.)</para>
          </listitem>
          <listitem>
            <para>It seems that (accordingly) much information has now retreated again behind pay
              walls or back onto proprietary platforms. “Proprietary platforms” includes
              traditionally controlled media (i.e. with formally curtailed access rights); social
              media; but also media whose content (think of the restaurant review sites) is
              essentially produced by its consumers, gratis. It seems that someone always has their
              finger in the pie.</para>
            <para>What a moment for owning and controlling the format and encoding of your data set
              – not just the data itself, but for practical purposes, <emphasis>access</emphasis> to
              it (that which is paradoxically blocked by proprietary stacks). This, first and above
              all, has been what XML has always been about.</para>
          </listitem>
          <listitem>
            <para>Again paradoxically, open source and even “open information” has also shown it can
              (also) be economically viable – can “pay for itself” – if it is linked organically to
              some demand-driven, productive activity. This may (see above) happen only on the edges
              of an industry. But providers who can <emphasis role="ital">both</emphasis> give away
              / “share”, <emphasis role="ital">and</emphasis> “own and control”, may have a shot at
              viability.</para>
          </listitem>
        </itemizedlist></para>
      <para>The world is very different from 1997. Has XML in the browser missed its moment? Or
        maybe is it just arriving?</para>
    </section>
    <section>
      <title>Like any ecosystem</title>
      <para>The web is dying and growing at the same time</para>
      <para>The web subsists / evolves / matures as a capable medium</para>
      <para>The semantics of this stack are a layering of CSS, HTML, and standard Javascript
        (ECMAScript)</para>
      <para>Ubiquitous, capable, improving: more standard and stable</para>
      <para>There must always be a “reductio” (“base”) medium to which other media / channels can
        appeal</para>
      <para>Thus the web remains a way to get stuff in front of people</para>
      <para>(One at a time or within defined communities of interest, if not en masse, and even if
        the ultimate channel or platform is not on the web)</para>
    </section>
    <section>
      <title>Opportunity of the moment</title>
      <para>An XSLT processor capable of arbitrary transforms can be compiled and run under
        Javascript</para>
      <para>In the case of SaxonJS, the transformations (XSLT 3.0) must be compiled up front<itemizedlist>
          <listitem>
            <para>Saxonica offers this feature under the EE license</para>
          </listitem>
        </itemizedlist></para>
      <para>Once XSLT is compiled (stylesheet export file: SEF), further use / sharing is free (no
        costs, licenses or registration for anyone)</para>
      <para>The model</para>
      <para>
        <itemizedlist>
          <listitem>
            <para>Write your XML</para>
          </listitem>
          <listitem>
            <para>Write (or find/acquire) and compile your XSLT</para>
          </listitem>
        </itemizedlist>
        <itemizedlist>
          <listitem>
            <para>Configure a “harness” or host file (HTML) to glue them together</para>
          </listitem>
        </itemizedlist>
        <itemizedlist>
          <listitem>
            <para>Drop all these, plus the SaxonJS libraries, onto a web server and publish its
              address</para>
          </listitem>
        </itemizedlist>
      </para>
      <para>(Or – <emphasis role="ital">just open the HTML on the file system</emphasis> – ?!)<note>
          <para>The question here is whether SaxonJS works without a web server at all, for example
            if you simply open a local HTML file with settings for SaxonJS, will it execute
            successfully. The answer is, it will, up to a point.</para>
        </note></para>
    </section>
    <section>
      <title>Why this may actually work</title>
      <para>SaxonJS is carefully placed on the strategic fine edge between standards-based and
        proprietary</para>
      <para>As a proprietary platform it externalizes everything it can to the standards<itemizedlist>
          <listitem>
            <para>E.g., already-owners of XML can reuse our same XML and even same
              stylesheets</para>
          </listitem>
          <listitem>
            <para>Running the SaxonJS compiler and distributing the SaxonJS runtime, require a
              license. However a single developer license suffices: the distribution is free to your
              users and indeed unnoticed by them as it happens in the background. Meanwhile the XML,
              XSLT, compiled SEF and design all belong to you.</para>
          </listitem>
          <listitem>
            <para>The only other long-term dependency – http server + Javascript-capable browser(s)
              – is sustainable?</para>
          </listitem>
        </itemizedlist></para>
      <para>This creates new kinds of leverage in exploiting the power of XML, and available now,
        i.e. potentially already helping to capitalize on your earlier investments in the
        technology.</para>
      <para>If you already have XML/XSLT, costs and risks are low and potential benefits are
        high.</para>
      <para>Might it even motivate new users of XML/XSLT?</para>
      <para>(Answer: it <emphasis role="ital">contributes</emphasis> to the case even if it is not
        determinative.)</para>
    </section>
    <section>
      <title>What about the business case</title>
      <para>It's still difficult to argue for “giving away the semantics”. This is only sometimes a
        feature or even a good idea.</para>
      <para>Yet while XML can expose the source, with SaxonJS we get (some, relative) obfuscation of
        the processing, for free.</para>
      <para>Plus, the XML is behind a link - that crawler has to read that. Then too we can still
        protect or obfuscate the source if we want to.</para>
      <para>This places stress on XSLT (compiled into SEF) as (site of) “added value”: not the
        information “bare” but also its rendition (logic), what we are making of it.</para>
      <para><emphasis>The application as a whole differentiates</emphasis>, not just the data. (How
        can this be better than a nice PDF, for example? Seeing is believing.)</para>
      <para>New kinds of hypertext and/or dynamic interactions with data become thinkable given XSLT
        as an abstraction layer …</para>
      <para>(And in principle such applications would be more difficult to reverse engineer, spoof
        or even emulate than pre-cooked HTML/CSS/Javascript.)</para>
    </section>
  </section>
  <section>
    <title>Demonstrations</title>
    <itemizedlist>
      <listitem>
        <para>Demonstrations including demonstrations given with this paper are listed at <link
            xlink:href="https://wendellpiez.github.io/XMLjellysandwich/"
            xmlns:xlink="http://www.w3.org/1999/xlink"/></para>
      </listitem>
      <listitem>
        <para>At <link>https://github.com/wendellpiez/XMLjellysandwich</link> is a git repository
          with source code for several of the demos, as well as all the code you need to "bootstrap"
          your own SaxonJS application as described below and on the site (oXygen XML Developer or
          Editor is recommended).</para>
      </listitem>
      <listitem>
        <para>Also see the <link
            xmlns:xlink="http://www.w3.org/1999/xlink"
            xlink:href="http://www.saxonica.com/saxon-js/documentation/index.html#!samples">SaxonJS
            documentation</link> for (links to) more demonstrations</para>
      </listitem>
    </itemizedlist>
  </section>
  <section>
    <title>Implications</title>
    <section>
      <title>How it changes design</title>
      <para>Design emphasis goes back to the work as a whole, no longer so much “pages”<itemizedlist>
          <listitem>
            <para>So, the resource, site or work, not so much the view</para>
          </listitem>
          <listitem>
            <para>Inter-resource linking is now robust, rich and easy</para>
            <para>(No longer limited, expensive and prone to break)</para>
          </listitem>
        </itemizedlist></para>
      <para>Multiple views and access points now can reflect peculiar semantics of the source
        data</para>
      <para>The more peculiar / interesting the source data, the more reward there is for investment
        in specialized logic</para>
      <para>The server doesn't disappear, but just becomes a resource among others</para>
      <para>Question: How about XForms under SaxonJS? (XRX with SaxonJS in front)<note>
          <para>Answer: it's happening. See <citation linkend="DelprattandLocket2017">O'Neill
              Delpratt and Debbie Lockett's work (XML London 2017)</citation>.</para>
        </note></para>
    </section>
    <section>
      <title>There is no irony here</title>
      <para>SaxonJS is deployed in Javascript so we don't have to write Javascript</para>
      <para>XSLT turns out to be really good at event handling!</para>
      <itemizedlist>
        <listitem>
          <para>HTML/CSS provide canvas and paints</para>
        </listitem>
        <listitem>
          <para>XSLT is all the techniques of application</para>
        </listitem>
        <listitem>
          <para>Our model is … our model!</para>
        </listitem>
        <listitem>
          <para>But matching elements in the (rendered) page is now as easy as matching anywhere
            else</para>
        </listitem>
      </itemizedlist>
      <para>XML publication becomes its own archive</para>
      <para>Architecture implies entire libraries of support per document type (yes how
        classic)</para>
      <para>Even when “document set” is singular</para>
      <para>(Edit XML in git repo, then render via XSLT/SaxonJS calling public libraries?)</para>
      <section>
        <title>An example</title>
        <para>A powerful feature SaxonJS offers is specialized modes whereby the XSLT can declare
          alterations to be made directly in the rendered page in response to events such as button
          or mouse clicks.</para>
        <para>In the application here, we wish the reader to be able to click on any arbitrary span
          in the text, and the selected span along with all other spans with the same values of
            <code>@class</code> (i.e. 'class' assignments, note plural) – both in the document and
          in an associated SVG diagram – should receive highlight or visual emphasis. (See the Irish
          Airman demo to see this in action.)</para>
        <programlisting>&lt;xsl:template match="span | svg:tspan" mode="ixsl:onclick">
  &lt;xsl:apply-templates mode="off"
     select="key('classmates', 'ON')"/>
  &lt;xsl:apply-templates mode="on"
     select="key('classmates', tokenize(@class,'\s+'))"/>
&lt;/xsl:template>

&lt;xsl:key name="classmates" match="span | svg:tspan" use="tokenize(@class,'\s+')"/>

&lt;xsl:template match="*"                mode="off">
  &lt;ixsl:set-attribute name="class"
     select="string-join( (tokenize(@class,'\s+')[not(. eq 'ON')]), ' ')"/>
&lt;/xsl:template>
 
&lt;xsl:template match="*"                mode="on">
  &lt;ixsl:set-attribute name="class"
     select="string-join( (tokenize(@class,'\s+')[not(. eq 'ON')],'ON'), ' ')"/>
&lt;/xsl:template></programlisting>
        <para>Possibly noteworthy:<itemizedlist>
            <listitem>
              <para>The example shows how the display may be simply “retouched” dynamically with a
                mouse click on any marked span, by rewriting the “class” attribute using XSLT. No
                Javascript either to address (isolate) the elements we need, or to modify
                them.</para>
            </listitem>
            <listitem>
              <para>The first template matches both <code>span</code> in no namespace, or
                  <code>tspan</code> in SVG. In no namespace, the <code>span</code> will be in the
                HTML DOM (as rendered in the browser by SaxonJS). Accordingly, any span displayed in
                the browser, when clicked, will match this template – the template matches when a
                user clicks on a span element, with that same element as its context.</para>
              <para>It is important to keep in mind that this template will be applicable not to
                elements in the original source document of the transformation, but to elements in
                display, which is to say (in most cases) in the <emphasis>result</emphasis> of an
                XSLT transform. (Nowhere in the source document for Irish Airman is a
                  <code>span</code> element to be found, for example). Yet SaxonJS, as a generalized
                tree transformation engine, can bind and process its data just as it can any other
                tree it can address. In addition to mode <code>ixsl:onclick</code>, Saxon has modes
                providing bindings to any number of different kinds of events in the browser
                including mouse movements, hover behaviors (“mouse over“) and the rest.</para>
            </listitem>
            <listitem>
              <para>When invoked, this template does two things: it turns all spans in the document
                off (by applying templates to them), and it turns selected spans on (similarly).
                “Turning the element off” (or on) takes the form of removing (or adding) the value
                “ON” from its <code>class</code> attribute. Since the instruction (apply-templates)
                to go “on”, it will supersede on any spans selected both times – that is, it is
                possible for a span to go “off” with the first instruction, then “on” again with the
                second.</para>
              <para>The key matches all spans and tspans according to their various
                  <code>@class</code> values. Note especially that the set of elements returned by
                the key for the value “ON” will change, as this value is added or removed. In other
                words, as the HTML document is dynamic, so also are the keys that Saxon keeps to
                index into it.</para>
            </listitem>
            <listitem>
              <para>Matching any element in the “on” mode, we use a Saxon extension to add “ON” to
                its set of <code>@class</code> (“class” attribute) values. That is, any element
                matching the key (having a matching 'class' value) will be turned on, when a span
                with any class is clicked (resulting in calls to this template).</para>
              <para>This is many-to-many. Spans that have many classes, will (when clicked) turn on
                (rewriting an HTML attribute value) all elements of any of the same classes.</para>
              <para>CSS does the rest: elements that have class “ON” can be matched and highlighted
                in some way. </para>
              <para>The consequence is that the document's spans become “aware” of one another, as
                seen in the “Irish Airman” example, where (as noted) this behavior is used to
                provide for the indexing of rhymes and assonances.</para>
              <para>While such interactivity could also be programmed in one or two lines of
                JQuery*, the point here is not the terseness of the notation: it is that
                event-driven DOM operations are conducted using XSLT idioms over an XPath (XDM-like)
                data model.</para>
              <note>
                <para>* Well, except for the SVG part. This works seamlessly with SVG while
                  (unextended) JQuery does not.</para>
              </note>
            </listitem>
          </itemizedlist></para>
      </section>
    </section>
    <section>
      <title>What kinds of data, again?</title>
      <para>Product documentation</para>
      <para>Standards, reference catalogs and authority files</para>
      <para>Educational or not-for-profit publication</para>
      <para>Public domain, government and open data sets</para>
      <para>Not Linked Open Data so much as SANDs<itemizedlist>
          <listitem>
            <para>“Small Arcane Non-trivial Datasets” cf <citation linkend="Lubell2014">Josh Lubell
                2014</citation></para>
          </listitem>
          <listitem>
            <para>Special, bespoke, project data ...</para>
          </listitem>
        </itemizedlist></para>
    </section>
    <section>
      <title>Half-empty part</title>
      <para>Architecture is still somewhat opaque and cumbersome<itemizedlist>
          <listitem>
            <para>Um but compared to what?</para>
          </listitem>
          <listitem>
            <para>Maybe we can help with that</para>
          </listitem>
        </itemizedlist></para>
      <para>You have to have friendly feelings toward XSLT (don't you?)</para>
      <para>Development and debugging</para>
    </section>
    <section>
      <title>Getting started kit</title>
      <para>See <link>github.com/wendellpiez/XMLjellysandwich</link></para>
      <para>A set of stylesheets that can produce (from XML source):</para>
      <itemizedlist>
        <listitem>
          <para>A “host” HTML landing page with syntax and callouts</para>
        </listitem>
        <listitem>
          <para>A “starter” XSLT with templates already written, matching elements in the source
            XML</para>
          <para>(It also distinguishes between block and inline elements in your XML, casting them
            to HTML accordingly.)</para>
        </listitem>
        <listitem>
          <para>A normalized-as-standalone XML document copy</para>
        </listitem>
      </itemizedlist>
    </section>
    <section>
      <title>New ways to learn XSLT</title>
      <itemizedlist>
        <listitem>
          <para>Client-side XSLT was always fun - until you hit the wall</para>
        </listitem>
        <listitem>
          <para>With XSLT 3.0 – there is no more wall – just more ranges to climb</para>
        </listitem>
        <listitem>
          <para>Now we can better contemplate learning XSLT from the inside out</para>
        </listitem>
        <listitem>
          <para>New forms of “meaningful learning application” will become possible</para>
        </listitem>
      </itemizedlist>
    </section>
  </section>
  <bibliography>
    <title>Some references</title>
    <bibliomixed>Delpratt, O'Neil, and Michael Kay. “Interactive XSLT in the browser.” Presented at
      Balisage: The Markup Conference 2013, Montréal, Canada, August 6 - 9, 2013. In <emphasis
        role="ital">Proceedings of Balisage: The Markup Conference 2013</emphasis>. Balisage Series
      on Markup Technologies, vol. 10 (2013). DOI: <biblioid class="doi"
        >10.4242/BalisageVol10.Delpratt01</biblioid>.</bibliomixed>
    <bibliomixed xml:id="DelprattandLocket2017" xreflabel="Delpratt and Lockett 2017">Delpratt,
      O'Neil, and Debbie Lockett. “Distributing XSLT Processing between Client and Server.”
      Presented at XML London 2017 (<link
        xlink:href="http://xmllondon.com/2017/xmllondon-2017-proceedings.pdf"
        xmlns:xlink="http://www.w3.org/1999/xlink"/>) </bibliomixed>
    <bibliomixed>Lockett, Debbie, and Michael Kay. “Saxon-JS: XSLT 3.0 in the Browser.” Presented at
      Balisage: The Markup Conference 2016, Washington, DC, August 2 - 5, 2016. In <emphasis
        role="ital">Proceedings of Balisage: The Markup Conference 2016</emphasis>. Balisage Series
      on Markup Technologies, vol. 17 (2016). doi: <biblioid class="doi"
        >10.4242/BalisageVol17.Lockett01</biblioid>.</bibliomixed>
    <bibliomixed xml:id="Lubell2014" xreflabel="Lubell 2017">Lubell, Joshua. “XForms User Interfaces
      for Small Arcane Nontrivial Datasets.” Presented at Balisage: The Markup Conference 2014,
      Washington, DC, August 5 - 8, 2014. In <emphasis role="ital">Proceedings of Balisage: The
        Markup Conference 2014</emphasis>. Balisage Series on Markup Technologies, vol. 13 (2014).
      doi: <biblioid class="doi">10.4242/BalisageVol13.Lubell01</biblioid>.</bibliomixed>
    <bibliomixed>Lumley, John, Debbie Lockett and Michael Kay. “Compiling XSLT3, in the browser, in
      itself.” Presented at Balisage: The Markup Conference 2017, Washington, DC, August 1 - 4,
      2017. In <emphasis role="ital">Proceedings of Balisage: The Markup Conference 2017</emphasis>.
      Balisage Series on Markup Technologies, vol. 19 (2017). doi: <biblioid class="doi"
        >10.4242/BalisageVol19.Lumley01</biblioid>.</bibliomixed>
    <bibliomixed>Frameless XSLT processor. <link>http://frameless.io/xslt/</link></bibliomixed>
    <bibliomixed>Piez, Wendell. TEI Overlap Demonstration. (Saxon-CE demo in the browser.) See <link
       >http://www.piez.org/wendell/projects/Interedition2011/</link></bibliomixed>
    <bibliomixed>Piez, Wendell. XML Jelly Sandwich. Project on Github at <link
        xlink:href="https://github.com/wendellpiez/XMLJigsaw"
        xmlns:xlink="http://www.w3.org/1999/xlink"
        >https://github.com/wendellpiez/XMLjellysandwich</link> with demonstrations at
        <link>https://wendellpiez.github.io/XMLjellysandwich</link>.</bibliomixed>
    <bibliomixed>SaxonJS Documentation. From Saxonica. <link
        xlink:href="http://www.saxonica.com/saxon-js/documentation/"
        xmlns:xlink="http://www.w3.org/1999/xlink"
        >http://www.saxonica.com/saxon-js/documentation/</link>.</bibliomixed>
    <bibliomixed xml:id="sq_pan">SoftQuad Inc. SoftQuad Panorama product announcement, 1995. Archived at <link
        xlink:href="http://xml.coverpages.org/panofeat.html"
        xmlns:xlink="http://www.w3.org/1999/xlink">http://xml.coverpages.org/panofeat.html</link>
    </bibliomixed>
    <bibliomixed>oXygen XML Editor. From SyncroSoft. <link xlink:href="https://www.oxygenxml.com/"
        xmlns:xlink="http://www.w3.org/1999/xlink">https://www.oxygenxml.com/</link>.</bibliomixed>
  </bibliography>
     
</article>
