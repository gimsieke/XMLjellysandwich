<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="balisage-proceedings-html.xsl"?>
<?xml-model href="../../../../Documents/Balisage/lib/balisage-1-3.rng" type="application/xml" schematypens="http://relaxng.org/ns/structure/1.0"?>
<?xml-stylesheet type="text/css" href="../../../Documents/Balisage/lib/balisage-author.css" title="Forms interface" alternate="no"?>
<article xmlns="http://docbook.org/ns/docbook" version="5.0-subset Balisage-1.3"
  xml:id="Balisage2017Piez01" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <title>Interactive web applications demonstrating SaxonJS</title>
  <info>
    <abstract>
      <para>SaxonJS promises “real” XSLT in the browser. Old-timers are thrilled, cool kids are
        showing interest, and many people are very intrigued. The architecture is still
        characterized by a strong distinction between logical and presentation layers, but it is now
        possible to program user interaction in the browser as event-driven transformation logic,
        using XSLT alone. The unit of composition (the “work”) now corresponds to the unit of
        delivery (no longer a “page” but a “resource”). Most importantly, it is now possible to
        build and deploy interactive web sites with XML and XSLT alone -- no Java, no Javascript, no
        specialized server app or complex batch processing. But to deploy, you need a web server, a
        compiled XSLT stylesheet, and a certain amount of infrastructure. XML Jelly Sandwich, a
        starter XSLT hosted on GitHub, can provide infrastructure of sufficient quality for
        testing.</para>
    </abstract>
    <author>
      <personname>
        <firstname>Wendell</firstname>
        <surname>Piez</surname>
      </personname>
      <personblurb>
        <para>Wendell Piez is an independent consultant specializing in XML and XSLT, based in
          Rockville MD.</para>
      </personblurb>
    </author>
    
  </info>
  <note>
    <para>Sections of this article were presented as slides. Here, some of them are altered or
      expanded into prose, while others are touched, amended or annotated. For slides, <link
        xmlns:xlink="http://www.w3.org/1999/xlink"
        xlink:href="https://wendellpiez.github.io/XMLjellysandwich/Balisage2017/balisage2017-slides.html"
        >see Github.io</link> or link above.</para>
  </note>
  <section>
    <title>Context</title>
    <section>
      <title>Old promise, new realization</title>
      <para>XSLT was originally designed with client-side processing in mind</para>
      <para>This never (quite) happened or did it? with XSLT 1.0<itemizedlist>
          <listitem>
            <para>Yes, you can (sorta) get it to work ...</para>
          </listitem>
        </itemizedlist></para>
      <para>Impediments to this effort<itemizedlist>
          <listitem>
            <para>No API or runtime interface to XSLT execution</para>
          </listitem>
          <listitem>
            <para>Considerable limitations of XSLT 1.0</para>
          </listitem>
        </itemizedlist></para>
      <para>At long last, Saxonica offers a solution that addresses both problems</para>
      <para>Background / context / problem: (lack of) business case for exposing XML (what?)</para>
    </section>
    <section>
      <title>The web is dead</title>
      <para>I don't actually think the web is dead. However, I think our ideas about what the web
        is, or should be, have changed and in many ways we have been disappointed. Certain hopes
        regarding the web are dead. At the same time, I think we have barely begun to think about
        the fullest implications of a worldwide publishing platform that is only too prone to
        fragmentation and abuse. I think the web has been compromised by a few issues, both economic
        and architectural-structural:<itemizedlist>
          <listitem>
            <para>The predominant advertising model has offered (some measure of) economic viability
              (or its promise) at the cost of "noise" in the browser; there is no such thing as a
              "safe space" on the web. Ironically this means that getting through to an audience is
              harder than ever (to say nothing of reaching and serving them).</para>
          </listitem>
          <listitem>
            <para>This has combined with the way in which the layered architecture (CSS over HTML
              over data stores), cumbersome though it is, has had the effect of equalizing
              production values across the economic and institutional spectrum. The New York Times
              looks like anyone's spoof of the New York Times. Especially when either one is seen
              through the lens of Facebook.</para>
          </listitem>
          <listitem>
            <para>Consequently, in a flattened world, indexing becomes everything, and page ranking
              (and its equivalents) become surrogates for actual attention. Link counting and page
              hit analysis substitute for contact and responsiveness between parties in
              communication, "producers" and "consumers" of information. (Even these terms for what
              used to be thought of as "readers" and "writers" suggest a kind of alienation, in
              which both of these roles have become commoditized.)</para>
            <para>Thus as "consumers", bots and crawlers are more important than people (because
              they produce the indexes that are presented to people), who have become objects of
              second-hand interest.</para>
          </listitem>
          <listitem>
            <para>Enterprises on a common Internet platform tend naturally toward monopoly, each
              sector being dominated by a single "provider" (more alienated and generalized
              language) with only edges of the market left to others; this is can be true even in
              the quasi-gift economy of Open Source, in which reputation becomes currency, and
              reputation is achieved by altruism (the gift) or its semblance (which may indeed be no
              more than network effects - i.e. real benefits, but created by the community not the
              founder). This is bad for "culture" in the broadest sense.</para>
          </listitem>
          <listitem>
            <para>It seems that (consequently) much information has now retreated again behind pay
              walls or onto proprietary platforms. "Proprietary platforms" includes social media but
              also media whose content (think of the restaurant review sites) is essentially
              produced by its consumers, gratis. It seems that someone always has their finger in
              the pie.</para>
          </listitem>
          <listitem>
            <para>Yet paradoxically, open source and even "open information" has shown it can be
              economically viable – can "pay for itself" – if it is linked organically to some
              market-driven, remunerative activity. This may (see above) happen only on the edges of
              an industry. But providers who can both give away / "share", and "own and control"
              along well-defined lines, may have a shot at viability.</para>
          </listitem>
        </itemizedlist></para>
      <para>The world is very different from 1997. Has XML in the browser missed its moment? Or
        maybe is it just arriving?</para>
    </section>
    <section>
      <title>The browser has emerged as a platform</title>
      <para>The web subsists / evolves / matures as a capable medium</para>
      <para>Ubiquitous, capable, improving: more standard and stable</para>
      <para>There must always be a "reductio" ("base") medium to which other media / channels can
        appeal</para>
      <para>Thus the web remains a way to get stuff in front of people</para>
      <para>(One at a time or within defined communities of interest, if not en masse)</para>
    </section>
    <section>
      <title>Opportunity of the moment</title>
      <para>An XSLT processor capable of arbitrary transforms can be compiled and run under
        Javascript</para>
      <para>In the case of SaxonJS, the transformations (XSLT) must be compiled up front<itemizedlist>
          <listitem>
            <para>Saxonica offers this feature under the EE license</para>
          </listitem>
        </itemizedlist></para>
      <para>Once XSLT is compiled (stylesheet export file: SEF), further use / sharing is free (no
        costs, licenses or registration for anyone)</para>
      <para>The model</para>
      <para>
        <itemizedlist>
          <listitem>
            <para>Write your XML</para>
          </listitem>
          <listitem>
            <para>Write your XSLT and compile it (or find one)</para>
          </listitem>
        </itemizedlist>
        <itemizedlist>
          <listitem>
            <para>Configure a "harness" or host file (HTML) to glue them together</para>
          </listitem>
        </itemizedlist>
        <itemizedlist>
          <listitem>
            <para>Drop it onto a web server and publish its address</para>
          </listitem>
        </itemizedlist>
      </para>
      <para>(Or – <emphasis role="ital">just open the HTML on the file system</emphasis> – ?!)<note>
          <para>The question here is whether SaxonJS works without a web browser at all, for example
            if you simply open a local HTML file with settings for SaxonJS, will it execute
            successfully. The answer is, it will, up to a point.</para>
        </note></para>
    </section>
    <section>
      <title>Why this may actually work</title>
      <para>SaxonJS is carefully placed on the strategic fine edge between standards-based and
        proprietary</para>
      <para>As a proprietary platform it externalizes everything it can to the standards<itemizedlist>
          <listitem>
            <para>E.g., already-owners of XML can reuse our same XML and even same
              stylesheets</para>
          </listitem>
        </itemizedlist></para>
      <para>This creates new possibilities of "information arbitrage" - power of XML at lower
        cost</para>
      <para>SaxonJS is licensed but your XML, XSLT, compiled SEF and design all belong to you</para>
      <para>External dependency on http server + Javascript-capable browser(s) is –
        sustainable?</para>
    </section>
    <section>
      <title>What about the business case</title>
      <para>It's still difficult to argue for "giving away the semantics".</para>
      <para>Yet - while XML can expose the source, with SaxonJS we get obfuscation of the
        processing, for free.</para>
      <para>(Plus, the XML is behind a link - that crawler has to read that. Then too we can still
        obfuscate the source if we want to.)</para>
      <para>This places stress on XSLT (compiled into SEF) as (site of) "added value": not the
        information but its rendition (logic).</para>
      <para><emphasis>The application as a whole differentiates</emphasis>, not just the
        data.</para>
      <para>(In principle, this could make it more difficult to reverse engineer, spoof or even
        emulate than pre-cooked HTML/CSS.)</para>
    </section>
  </section>
  <section>
    <title>Implications</title>
    <section>
      <title>How it changes design</title>
      <para>It will be interesting to see whether there is much use of SaxonJS, and where</para>
      <para>Emphasis goes back to the work as a whole, no longer so much "pages"</para>
      <para>Multiple views and access points reflect peculiar semantics of the source data</para>
      <para>Server doesn't disappear, but just becomes a resource</para>
      <para>Question: How about XForms under SaxonJS? (XRX with SaxonJS in front)<note>
          <para>Answer: it's happening. See O'Neill Delpratt and Debbie Lockett's work (XML London
            2017).</para>
        </note></para>
    </section>
    <section>
      <title>There is no irony here</title>
      <para>SaxonJS is deployed in Javascript so we don't have to write Javascript</para>
      <para>XSLT turns out to be really good at event handling!</para>
      <itemizedlist>
        <listitem>
          <para>HTML/CSS provide canvas and paints</para>
        </listitem>
        <listitem>
          <para>XSLT is all the techniques of application</para>
        </listitem>
        <listitem>
          <para>Matching elements in the (rendered) page is as easy as matching anywhere else</para>
        </listitem>
      </itemizedlist>
      <para>XML publication becomes its own archive</para>
      <para>Architecture implies entire libraries of support per document type (yes how
        classic)</para>
      <para>Even when "document set" is singular.</para>
      <para>(Edit XML in git repo, then render via XSLT/SaxonJS?)</para>
    </section>
    <section>
      <title>What kinds of data, again?</title>
      <para>Product documentation</para>
      <para>Standards, reference catalogs and authority files</para>
      <para>Educational or not-for-profit publication</para>
      <para>Public domain, government and open data sets</para>
      <para>(Not Linked Open Data so much as SANDs - "Small Arcane Non-trivial Datasets" cf Josh
        Lubell 2014)</para>
    </section>
    <section>
      <title>Half-empty part</title>
      <para>Architecture is still a bit opaque and cumbersome<itemizedlist>
          <listitem>
            <para>Um but compared to what?</para>
          </listitem>
          <listitem>
            <para>Maybe we can help with that</para>
          </listitem>
        </itemizedlist></para>
      <para>XSLT is its heart and soul, not something you can avoid</para>
      <para>Development and debugging</para>
    </section>
    <section>
      <title>Getting started kit</title>
      <para>See <link>github.com/wendellpiez/XMLjellysandwich</link></para>
      <para>Set of stylesheets can produce:</para>
      <itemizedlist>
        <listitem>
          <para>"host" HTML landing page with syntax and callouts</para>
        </listitem>
        <listitem>
          <para>"starter" XSLT with templates</para>
        </listitem>
        <listitem>
          <para>normalized-as-standalone XML document copy</para>
        </listitem>
      </itemizedlist>
    </section>
    <section>
      <title>New ways to learn XSLT</title>
      <itemizedlist>
        <listitem>
          <para>Client-side XSLT was always fun - until you hit the wall</para>
        </listitem>
        <listitem>
          <para>Now we can better contemplate learning XSLT from the inside out</para>
        </listitem>
        <listitem>
          <para>New forms of "meaningful learning application" should become possible</para>
        </listitem>
      </itemizedlist>
    </section>
  </section>
  <section>
    <title>Demonstrations</title>
    <itemizedlist>
      <listitem>
        <para>Links to demonstrations are now given at <link
            xlink:href="https://wendellpiez.github.io/XMLjellysandwich/"
            xmlns:xlink="http://www.w3.org/1999/xlink"/>, where you can also find a Git repo
          containing all the code.</para>
      </listitem>
    </itemizedlist>
  </section>
  <bibliography>
    <title>Some references</title>
    <bibliomixed>Delpratt, O'Neil, and Michael Kay. “Interactive XSLT in the browser.” Presented at
      Balisage: The Markup Conference 2013, Montréal, Canada, August 6 - 9, 2013. In <emphasis
        role="ital">Proceedings of Balisage: The Markup Conference 2013</emphasis>. Balisage Series
      on Markup Technologies, vol. 10 (2013). DOI: <biblioid class="doi"
        >10.4242/BalisageVol10.Delpratt01</biblioid>.</bibliomixed>
    <bibliomixed>Delpratt, O'Neil, and Debbie Lockett. “Distributing XSLT Processing between Client
      and Server.” Presented at XML London 2017 (<link
        xlink:href="http://xmllondon.com/2017/xmllondon-2017-proceedings.pdf"
        xmlns:xlink="http://www.w3.org/1999/xlink"/>) </bibliomixed>
    <bibliomixed>Lockett, Debbie, and Michael Kay. “Saxon-JS: XSLT 3.0 in the Browser.” Presented at
      Balisage: The Markup Conference 2016, Washington, DC, August 2 - 5, 2016. In <emphasis
        role="ital">Proceedings of Balisage: The Markup Conference 2016</emphasis>. Balisage Series
      on Markup Technologies, vol. 17 (2016). DOI: <biblioid class="doi"
        >10.4242/BalisageVol17.Lockett01</biblioid>.</bibliomixed>
    <bibliomixed>Lubell, Joshua. “XForms User Interfaces for Small Arcane Nontrivial Datasets.”
      Presented at Balisage: The Markup Conference 2014, Washington, DC, August 5 - 8, 2014. In
        <emphasis role="ital">Proceedings of Balisage: The Markup Conference 2014</emphasis>.
      Balisage Series on Markup Technologies, vol. 13 (2014). DOI: <biblioid class="doi"
        >10.4242/BalisageVol13.Lubell01</biblioid>.</bibliomixed>
    <bibliomixed>Frameless XSLT processor. <link>http://frameless.io/xslt/</link></bibliomixed>
    <bibliomixed>Piez, Wendell. TEI Overlap Demonstration. (Saxon-CE demo in the browser.) See <link
       >http://www.piez.org/wendell/projects/Interedition2011/</link></bibliomixed>
    <bibliomixed>Piez, Wendell. XML Jigsaw. Project on Github at <link
        xlink:href="https://github.com/wendellpiez/XMLJigsaw"
        xmlns:xlink="http://www.w3.org/1999/xlink"
      >https://github.com/wendellpiez/XMLJigsaw</link>.</bibliomixed>
    <bibliomixed>SaxonJS Documentation. From Saxonica. <link
        xlink:href="http://www.saxonica.com/saxon-js/documentation/"
        xmlns:xlink="http://www.w3.org/1999/xlink"
        >http://www.saxonica.com/saxon-js/documentation/</link>.</bibliomixed>
    <bibliomixed xml:id="sq_pan">SoftQuad Inc. SoftQuad Panorama product announcement, 1995. Archived at <link
        xlink:href="http://xml.coverpages.org/panofeat.html"
        xmlns:xlink="http://www.w3.org/1999/xlink">http://xml.coverpages.org/panofeat.html</link>
    </bibliomixed>
    <bibliomixed>oXygen XML Editor. From SyncroSoft. <link xlink:href="https://www.oxygenxml.com/"
        xmlns:xlink="http://www.w3.org/1999/xlink">https://www.oxygenxml.com/</link>.</bibliomixed>
  </bibliography>
     
</article>
