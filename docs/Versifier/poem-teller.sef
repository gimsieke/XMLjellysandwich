<?xml version="1.0" encoding="utf-8"?>
<package xmlns="http://ns.saxonica.com/xslt/export" xmlns:fn="http://www.w3.org/2005/xpath-functions" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:vv="http://saxon.sf.net/generated-variable" xmlns:java-type="http://saxon.sf.net/java-type" version="30" packageVersion="1" saxonVersion="9.8.0.12" target="JS" targetVersion="1" relocatable="false">
 <co id="0" binds="1 2">
  <mode name="Q{}switch-in" onNo="TC" flags="W" patternSlots="0">
   <templateRule prec="0" prio="0.5" seq="0" rank="1" minImp="0" slots="0" flags="s" line="91" module="file:/home/wendell/public_html/XMLjellysandwich/docs/Versifier/poem-teller.xsl">
    <p.withPredicate role="match">
     <p.nodeTest test="element()" jsTest="return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1;"/>
     <fn baseUri="file:/home/wendell/public_html/XMLjellysandwich/docs/Versifier/poem-teller.xsl" ns="xsl=~ XJS=http://github.com/wendellpiez/XMLjellysandwich ixsl=~ xs=~" line="91" name="contains-token">
      <cvUntyped to="xs:string">
       <attVal name="Q{}class" chk="0"/>
      </cvUntyped>
      <str val="ON"/>
     </fn>
    </p.withPredicate>
    <applyT role="action" baseUri="file:/home/wendell/public_html/XMLjellysandwich/docs/Versifier/poem-teller.xsl" ns="xsl=~ XJS=http://github.com/wendellpiez/XMLjellysandwich ixsl=~ xs=~" line="92" mode="Q{}off" flags="t" bSlot="0">
     <dot role="select" type="element()"/>
    </applyT>
   </templateRule>
   <templateRule prec="0" prio="-0.5" seq="1" rank="0" minImp="0" slots="0" flags="s" line="95" module="file:/home/wendell/public_html/XMLjellysandwich/docs/Versifier/poem-teller.xsl">
    <p.nodeTest role="match" test="element()" jsTest="return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1;"/>
    <applyT role="action" baseUri="file:/home/wendell/public_html/XMLjellysandwich/docs/Versifier/poem-teller.xsl" ns="xsl=~ XJS=http://github.com/wendellpiez/XMLjellysandwich ixsl=~ xs=~" line="96" mode="Q{}on" flags="t" bSlot="1">
     <dot role="select" type="element()"/>
    </applyT>
   </templateRule>
  </mode>
 </co>
 <co id="3" binds="4">
  <template name="Q{}show" flags="os" line="146" module="file:/home/wendell/public_html/XMLjellysandwich/docs/Versifier/poem-teller.xsl" slots="0">
   <sequence role="body" baseUri="file:/home/wendell/public_html/XMLjellysandwich/docs/Versifier/poem-teller.xsl" ns="xsl=~ XJS=http://github.com/wendellpiez/XMLjellysandwich ixsl=~ xs=~" line="148">
    <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}set-attribute" type="item()*">
     <str val="class"/>
     <fn name="string-join">
      <filter flags="b">
       <fn name="tokenize">
        <cvUntyped to="xs:string">
         <data>
          <slash simple="1">
           <treat as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="14|2|XPTY0020|">
            <dot flags="a"/>
           </treat>
           <axis name="attribute" nodeTest="attribute(Q{}class)" jsTest="return item.name==='class'"/>
          </slash>
         </data>
        </cvUntyped>
        <str val="\s+"/>
        <str val=""/>
       </fn>
       <vc op="ne" onEmpty="1" comp="CCC">
        <dot type="xs:string"/>
        <str val="hide"/>
       </vc>
      </filter>
      <str val=" "/>
     </fn>
    </ifCall>
    <applyT line="149" mode="Q{}spill" flags="t" bSlot="0">
     <first role="select">
      <slash>
       <treat as="node()" jsTest="return SaxonJS.U.isNode(item);" diag="14|3|XPTY0020|">
        <dot flags="a"/>
       </treat>
       <union op="|">
        <axis name="child" nodeTest="node()" jsTest="return SaxonJS.U.isNode(item);"/>
        <axis name="following" nodeTest="node()" jsTest="return SaxonJS.U.isNode(item);"/>
       </union>
      </slash>
     </first>
    </applyT>
   </sequence>
  </template>
 </co>
 <co id="5" binds="">
  <globalVariable name="Q{}terminalchars" type="xs:string" line="100" module="file:/home/wendell/public_html/XMLjellysandwich/docs/Versifier/poem-teller.xsl" visibility="PRIVATE" jsAcceptor="return SaxonJS.U.Atomic.string.cast(val);" jsCardCheck="function c(n) {return n==1;};">
   <str val="\.!\?;,:—…"/>
  </globalVariable>
 </co>
 <co id="6" binds="6 5 5">
  <mode name="Q{}pause" onNo="TC" flags="W" patternSlots="0">
   <templateRule prec="0" prio="1.0" seq="4" rank="2" minImp="0" slots="0" flags="s" as="xs:integer" line="173" module="file:/home/wendell/public_html/XMLjellysandwich/docs/Versifier/poem-teller.xsl">
    <p.withPredicate role="match">
     <p.nodeTest test="element()" jsTest="return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1;"/>
     <axis baseUri="file:/home/wendell/public_html/XMLjellysandwich/docs/Versifier/poem-teller.xsl" ns="xsl=~ XJS=http://github.com/wendellpiez/XMLjellysandwich ixsl=~ xs=~" line="173" name="attribute" nodeTest="attribute(Q{}data-pause)" jsTest="return item.name==='data-pause'"/>
    </p.withPredicate>
    <cvUntyped role="action" baseUri="file:/home/wendell/public_html/XMLjellysandwich/docs/Versifier/poem-teller.xsl" ns="xsl=~ XJS=http://github.com/wendellpiez/XMLjellysandwich ixsl=~ xs=~" line="174" to="xs:integer">
     <cast as="xs:untypedAtomic" emptiable="0">
      <fn name="string">
       <convert from="xs:integer" to="xs:string">
        <cast as="xs:integer" emptiable="1">
         <attVal name="Q{}data-pause" chk="0"/>
        </cast>
       </convert>
      </fn>
     </cast>
    </cvUntyped>
   </templateRule>
   <templateRule prec="0" prio="0.5" seq="3" rank="1" minImp="0" slots="0" flags="s" as="xs:integer" line="169" module="file:/home/wendell/public_html/XMLjellysandwich/docs/Versifier/poem-teller.xsl">
    <p.withPredicate role="match">
     <p.nodeTest test="element()" jsTest="return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1;"/>
     <fn baseUri="file:/home/wendell/public_html/XMLjellysandwich/docs/Versifier/poem-teller.xsl" ns="xsl=~ XJS=http://github.com/wendellpiez/XMLjellysandwich ixsl=~ xs=~" line="169" name="contains-token">
      <cvUntyped to="xs:string">
       <attVal name="Q{}class" chk="0"/>
      </cvUntyped>
      <str val="line"/>
     </fn>
    </p.withPredicate>
    <cvUntyped role="action" baseUri="file:/home/wendell/public_html/XMLjellysandwich/docs/Versifier/poem-teller.xsl" ns="xsl=~ XJS=http://github.com/wendellpiez/XMLjellysandwich ixsl=~ xs=~" line="170" to="xs:integer">
     <cast as="xs:untypedAtomic" emptiable="0">
      <fn name="string-join">
       <convert from="xs:anyAtomicType" to="xs:string">
        <data>
         <first>
          <sequence>
           <forEach>
            <fn name="key">
             <str val="input-by-name"/>
             <str val="line"/>
             <check card="1" diag="0|2||fn:key">
              <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}page" type="document-node()?"/>
             </check>
            </fn>
            <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}get" type="item()*">
             <dot type="node()"/>
             <str val="value"/>
            </ifCall>
           </forEach>
           <int val="3"/>
          </sequence>
         </first>
        </data>
       </convert>
       <str val=" "/>
      </fn>
     </cast>
    </cvUntyped>
   </templateRule>
   <templateRule prec="0" prio="0.5" seq="2" rank="1" minImp="0" slots="0" flags="s" as="xs:integer" line="165" module="file:/home/wendell/public_html/XMLjellysandwich/docs/Versifier/poem-teller.xsl">
    <p.withPredicate role="match">
     <p.nodeTest test="element()" jsTest="return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1;"/>
     <fn baseUri="file:/home/wendell/public_html/XMLjellysandwich/docs/Versifier/poem-teller.xsl" ns="xsl=~ XJS=http://github.com/wendellpiez/XMLjellysandwich ixsl=~ xs=~" line="165" name="contains-token">
      <cvUntyped to="xs:string">
       <attVal name="Q{}class" chk="0"/>
      </cvUntyped>
      <str val="stanza"/>
     </fn>
    </p.withPredicate>
    <cvUntyped role="action" baseUri="file:/home/wendell/public_html/XMLjellysandwich/docs/Versifier/poem-teller.xsl" ns="xsl=~ XJS=http://github.com/wendellpiez/XMLjellysandwich ixsl=~ xs=~" line="166" to="xs:integer">
     <cast as="xs:untypedAtomic" emptiable="0">
      <fn name="string-join">
       <convert from="xs:anyAtomicType" to="xs:string">
        <data>
         <first>
          <sequence>
           <forEach>
            <fn name="key">
             <str val="input-by-name"/>
             <str val="stanza"/>
             <check card="1" diag="0|2||fn:key">
              <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}page" type="document-node()?"/>
             </check>
            </fn>
            <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}get" type="item()*">
             <dot type="node()"/>
             <str val="value"/>
            </ifCall>
           </forEach>
           <int val="12"/>
          </sequence>
         </first>
        </data>
       </convert>
       <str val=" "/>
      </fn>
     </cast>
    </cvUntyped>
   </templateRule>
   <templateRule prec="0" prio="10.0" seq="5" rank="3" minImp="0" slots="0" flags="s" as="xs:integer" line="182" module="file:/home/wendell/public_html/XMLjellysandwich/docs/Versifier/poem-teller.xsl">
    <p.withPredicate role="match">
     <p.nodeTest test="element(Q{}span)" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1 &amp;&amp; q.uri===''&amp;&amp;q.local==='span';"/>
     <is baseUri="file:/home/wendell/public_html/XMLjellysandwich/docs/Versifier/poem-teller.xsl" ns="xsl=~ XJS=http://github.com/wendellpiez/XMLjellysandwich ixsl=~ xs=~" line="182" op="is">
      <dot type="element(Q{}span)"/>
      <slash>
       <fn name="root">
        <dot type="element(Q{}span)"/>
       </fn>
       <first>
        <filter flags="b">
         <axis name="descendant" nodeTest="element(Q{}span)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri===''&amp;&amp;q.local==='span';"/>
         <fn name="contains-token">
          <cvUntyped to="xs:string">
           <attVal name="Q{}class" chk="0"/>
          </cvUntyped>
          <str val="phr"/>
         </fn>
        </filter>
       </first>
      </slash>
     </is>
    </p.withPredicate>
    <int role="action" val="0"/>
   </templateRule>
   <templateRule prec="0" prio="0.5" seq="6" rank="1" minImp="0" slots="0" flags="s" as="xs:integer" line="184" module="file:/home/wendell/public_html/XMLjellysandwich/docs/Versifier/poem-teller.xsl">
    <p.withPredicate role="match">
     <p.nodeTest test="element(Q{}span)" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1 &amp;&amp; q.uri===''&amp;&amp;q.local==='span';"/>
     <fn baseUri="file:/home/wendell/public_html/XMLjellysandwich/docs/Versifier/poem-teller.xsl" ns="xsl=~ XJS=http://github.com/wendellpiez/XMLjellysandwich ixsl=~ xs=~" line="184" name="contains-token">
      <cvUntyped to="xs:string">
       <attVal name="Q{}class" chk="0"/>
      </cvUntyped>
      <str val="phr"/>
     </fn>
    </p.withPredicate>
    <treat role="action" baseUri="file:/home/wendell/public_html/XMLjellysandwich/docs/Versifier/poem-teller.xsl" ns="xsl=~ XJS=http://github.com/wendellpiez/XMLjellysandwich ixsl=~ xs=~" line="186" as="xs:integer" jsTest="return SaxonJS.U.Atomic.integer.matches(item);" diag="7|0|XTTE0505|match=&#34;span[contains-token(@class,'phr')]&#34; mode=&#34;pause&#34;">
     <check card="1" diag="7|0|XTTE0505|match=&#34;span[contains-token(@class,'phr')]&#34; mode=&#34;pause&#34;">
      <cvUntyped to="xs:integer">
       <data>
        <applyT mode="Q{}pause" flags="t" bSlot="0">
         <slash role="select" simple="1">
          <first>
           <filter flags="b">
            <slash simple="1">
             <dot type="element(Q{}span)"/>
             <axis name="preceding" nodeTest="element(Q{}span)" jsTest="var q=SaxonJS.U.nameOfNode(item); return item.nodeType===1 &amp;&amp; q.uri===''&amp;&amp;q.local==='span';"/>
            </slash>
            <fn name="contains-token">
             <cvUntyped to="xs:string">
              <attVal name="Q{}class" chk="0"/>
             </cvUntyped>
             <str val="phr"/>
            </fn>
           </filter>
          </first>
          <axis name="child" nodeTest="text()" jsTest="return item.nodeType===3;"/>
         </slash>
        </applyT>
       </data>
      </cvUntyped>
     </check>
    </treat>
   </templateRule>
   <templateRule prec="0" prio="0.5" seq="1" rank="1" minImp="0" slots="0" flags="s" as="xs:integer" line="158" module="file:/home/wendell/public_html/XMLjellysandwich/docs/Versifier/poem-teller.xsl">
    <p.withPredicate role="match">
     <p.nodeTest test="text()" jsTest="return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===3;"/>
     <fn baseUri="file:/home/wendell/public_html/XMLjellysandwich/docs/Versifier/poem-teller.xsl" ns="xsl=~ XJS=http://github.com/wendellpiez/XMLjellysandwich ixsl=~ xs=~" line="158" name="matches">
      <cvUntyped to="xs:string">
       <data>
        <dot type="text()"/>
       </data>
      </cvUntyped>
      <fn name="concat">
       <str val="["/>
       <gVarRef name="Q{}terminalchars" bSlot="1"/>
       <str val="]$"/>
      </fn>
      <str val=""/>
     </fn>
    </p.withPredicate>
    <cvUntyped role="action" baseUri="file:/home/wendell/public_html/XMLjellysandwich/docs/Versifier/poem-teller.xsl" ns="xsl=~ XJS=http://github.com/wendellpiez/XMLjellysandwich ixsl=~ xs=~" line="160" to="xs:integer">
     <cast as="xs:untypedAtomic" emptiable="0">
      <fn name="string-join">
       <convert from="xs:anyAtomicType" to="xs:string">
        <data>
         <first>
          <sequence>
           <forEach>
            <fn name="key">
             <str val="input-by-name"/>
             <fn line="159" name="replace">
              <cvUntyped to="xs:string">
               <data>
                <dot type="text()"/>
               </data>
              </cvUntyped>
              <fn name="concat">
               <str val=".*(["/>
               <gVarRef name="Q{}terminalchars" bSlot="2"/>
               <str val="])$"/>
              </fn>
              <str val="$1"/>
              <str val=""/>
             </fn>
             <check card="1" diag="0|2||fn:key">
              <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}page" type="document-node()?"/>
             </check>
            </fn>
            <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}get" type="item()*">
             <dot type="node()"/>
             <str val="value"/>
            </ifCall>
           </forEach>
           <int val="0"/>
          </sequence>
         </first>
        </data>
       </convert>
       <str val=" "/>
      </fn>
     </cast>
    </cvUntyped>
   </templateRule>
   <templateRule prec="0" prio="-0.5" seq="0" rank="0" minImp="0" slots="0" flags="s" as="xs:integer" line="154" module="file:/home/wendell/public_html/XMLjellysandwich/docs/Versifier/poem-teller.xsl">
    <p.nodeTest role="match" test="( element() | text() | comment() | processing-instruction() )" jsTest="return SaxonJS.U.isNode(item) &amp;&amp; (item.nodeType===1 || item.nodeType===3 || item.nodeType===7 || item.nodeType===8);"/>
    <cvUntyped role="action" baseUri="file:/home/wendell/public_html/XMLjellysandwich/docs/Versifier/poem-teller.xsl" ns="xsl=~ XJS=http://github.com/wendellpiez/XMLjellysandwich ixsl=~ xs=~" line="155" to="xs:integer">
     <cast as="xs:untypedAtomic" emptiable="0">
      <fn name="string-join">
       <convert from="xs:anyAtomicType" to="xs:string">
        <data>
         <first>
          <sequence>
           <forEach>
            <fn name="key">
             <str val="input-by-name"/>
             <str val="fallback"/>
             <check card="1" diag="0|2||fn:key">
              <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}page" type="document-node()?"/>
             </check>
            </fn>
            <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}get" type="item()*">
             <dot type="node()"/>
             <str val="value"/>
            </ifCall>
           </forEach>
           <int val="0"/>
          </sequence>
         </first>
        </data>
       </convert>
       <str val=" "/>
      </fn>
     </cast>
    </cvUntyped>
   </templateRule>
  </mode>
 </co>
 <co id="7" binds="">
  <template name="Q{}css" flags="os" line="189" module="file:/home/wendell/public_html/XMLjellysandwich/docs/Versifier/poem-teller.xsl" slots="0">
   <valueOf role="body" baseUri="file:/home/wendell/public_html/XMLjellysandwich/docs/Versifier/poem-teller.xsl" ns="xsl=~ XJS=http://github.com/wendellpiez/XMLjellysandwich ixsl=~ xs=~" line="189">
    <str val="&#xA;         html, body { background-color: white }&#xA;         &#xA;         .tag { color: green; font-family: sans-serif; font-size: 80%; font-weight: bold }&#xA;         &#xA;         &#xA;         .pub { }&#xA;         &#xA;         .title { }&#xA;         &#xA;         .author { }&#xA;         &#xA;         .l { padding-left: 2em; text-indent: -2em; margin-top: 0ex; margin-bottom: 0ex }&#xA;         &#xA;         .l * { display: inline }&#xA;         &#xA;         span.phr {transition: color 1s ease-in;&#xA;              -moz-transition: color 1s ease-in;&#xA;              -webkit-transition: color 1s ease-in; }&#xA;         &#xA;         #xmljellysandwich_footer { clear: both; width: 100%; font-size: 80%;&#xA;          border-top: thin solid black; padding-top: 1em; padding-bottom: 2em;&#xA;          font-family: 'Roboto Slab', sans-serif;&#xA;          margin-top: 1em }&#xA;         &#xA;         &#xA;         h5.toc-entry { display: inline-block; margin: 0em }&#xA;         // .toc-entry:before { content: &#34; ❖ &#34; }&#xA;         h5.toc-entry:before { content: &#34; ☙ &#34; }&#xA;         h5.toc-entry:first-child:before { content: &#34;&#34; }&#xA;         &#xA;         .catalog { max-width: 60% }&#xA;         section { border: medium solid black; padding: 2ex }&#xA;         section * { margin: 0em }&#xA;         section .title { font-weight: bold }&#xA;         section .source { font-style: italic }&#xA;         &#xA;         section { max-width: 32em }&#xA;         &#xA;         textarea { padding: 0.5em }&#xA;         button { width: 7em }&#xA;         button:hover { font-weight: bold }&#xA;         &#xA;         .verse p { padding-left: 3em; text-indent: -3em }&#xA;         .stanza p { margin-top: 0ex; margin-bottom: 0ex }&#xA;         .stanza { margin-top: 3ex }&#xA;         .stanza:first-child { margin-top: 0ex}&#xA;         &#xA;         .verse .indent1 { padding-left: 3em }&#xA;         .verse .indent2 { padding-left: 4em }&#xA;         .verse .indent3 { padding-left: 5em }&#xA;         .verse .indent4 { padding-left: 6em }&#xA;         .verse .indent5 { padding-left: 7em }&#xA;         .verse .indent6 { padding-left: 8em }&#xA;         .verse .indent7 { padding-left: 9em }&#xA;         .verse .indent8 { padding-left: 10em }&#xA;         .verse .indent9 { padding-left: 11em }&#xA;         &#xA;         .panel { display: none; padding: 2% }&#xA;         .panel.ON { display: inline-block } /* way better thanks to AMC */&#xA;         &#xA;         .hide { color: white }&#xA;          &#xA;          #tell_panel { background-color: white }&#xA;         &#xA;          #tweak_panel { z-index: 1; position: fixed; right: 1ex; margin-top: 1ex;&#xA;          width: 50%; float: right; clear: both; text-align: right; &#xA;          background-color: lavender; padding: 1em; border: thin outset black;&#xA;          font-family: sans-serif; font-size: 80%; overflow: auto;&#xA;          max-height: 80% }&#xA;         #tweak_panel &gt; *:first-child { margin-top: 0ex }&#xA;         &#xA;         .ctrl { display: inline-block; margin: 0ex }&#xA;         &#xA;         code.button { padding: 0.5ex 1ex; background-color: white; border: thin sold black }&#xA;   "/>
   </valueOf>
  </template>
 </co>
 <co id="8" binds="0 9 1 2 4 0 8">
  <mode name="Q{http://saxonica.com/ns/interactiveXSLT}click" onNo="TC" flags="W" patternSlots="0">
   <templateRule prec="0" prio="0.5" seq="2" rank="0" minImp="0" slots="0" flags="s" line="80" module="file:/home/wendell/public_html/XMLjellysandwich/docs/Versifier/poem-teller.xsl">
    <p.nodeSet role="match" type="element()">
     <fn baseUri="file:/home/wendell/public_html/XMLjellysandwich/docs/Versifier/poem-teller.xsl" ns="xsl=~ XJS=http://github.com/wendellpiez/XMLjellysandwich ixsl=~ xs=~" line="80" name="id">
      <str val="tweak_select"/>
     </fn>
    </p.nodeSet>
    <applyT role="action" baseUri="file:/home/wendell/public_html/XMLjellysandwich/docs/Versifier/poem-teller.xsl" ns="xsl=~ XJS=http://github.com/wendellpiez/XMLjellysandwich ixsl=~ xs=~" line="81" mode="Q{}switch-in" flags="t" bSlot="0">
     <fn role="select" name="id">
      <str val="tweak_panel"/>
     </fn>
    </applyT>
   </templateRule>
   <templateRule prec="0" prio="0.5" seq="1" rank="0" minImp="0" slots="1" flags="s" line="42" module="file:/home/wendell/public_html/XMLjellysandwich/docs/Versifier/poem-teller.xsl">
    <p.nodeSet role="match" type="element()">
     <fn baseUri="file:/home/wendell/public_html/XMLjellysandwich/docs/Versifier/poem-teller.xsl" ns="xsl=~ XJS=http://github.com/wendellpiez/XMLjellysandwich ixsl=~ xs=~" line="42" name="id">
      <str val="tell_select"/>
     </fn>
    </p.nodeSet>
    <sequence role="action" baseUri="file:/home/wendell/public_html/XMLjellysandwich/docs/Versifier/poem-teller.xsl" ns="xsl=~ XJS=http://github.com/wendellpiez/XMLjellysandwich ixsl=~ xs=~" line="43">
     <resultDoc global="#&#xA;#Fri Aug 17 21:31:48 EDT 2018&#xA;" local="#&#xA;#Fri Aug 17 21:31:48 EDT 2018&#xA;method={http\://saxonica.com/ns/interactiveXSLT}replace-content&#xA;">
      <str role="href" val="#tell_panel"/>
      <elem role="content" line="44" name="section" nsuri="">
       <sequence>
        <att name="class" flags="l">
         <str val="verse"/>
        </att>
        <forEach line="45">
         <fn name="id">
          <str val="poetry-in-motion"/>
          <check card="1" diag="0|1||fn:id">
           <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}page" type="document-node()?"/>
          </check>
         </fn>
         <forEachGroup line="47" algorithm="adjacent">
          <fn role="select" name="tokenize">
           <treat as="xs:string" jsTest="return SaxonJS.U.Atomic.string.matches(item);" diag="0|0||fn:tokenize">
            <check card="?" diag="0|0||fn:tokenize">
             <cvUntyped to="xs:string">
              <data>
               <ifCall name="Q{http://saxonica.com/ns/interactiveXSLT}get" type="item()*">
                <dot type="element()"/>
                <str val="value"/>
               </ifCall>
              </data>
             </cvUntyped>
            </check>
           </treat>
           <str val="\n"/>
           <str val=""/>
          </fn>
          <fn role="key" name="matches">
           <dot type="xs:string"/>
           <str val="\S"/>
           <str val=""/>
          </fn>
          <str role="collation" val="http://www.w3.org/2005/xpath-functions/collation/codepoint"/>
          <choose role="content" line="48">
           <currentGroupingKey/>
           <elem line="49" name="div" nsuri="" flags="l">
            <sequence>
             <att name="class" flags="l">
              <str val="stanza"/>
             </att>
             <forEach line="50">
              <currentGroup/>
              <let line="51" var="indent" as="xs:string" slot="0" eval="8">
               <fn name="replace">
                <treat as="xs:string" jsTest="return SaxonJS.U.Atomic.string.matches(item);" diag="0|0||fn:replace">
                 <check card="?" diag="0|0||fn:replace">
                  <cvUntyped to="xs:string">
                   <data>
                    <dot/>
                   </data>
                  </cvUntyped>
                 </check>
                </treat>
                <str val="\S.*$"/>
                <str val=""/>
                <str val=""/>
               </fn>
               <elem line="56" name="p" nsuri="" flags="l">
                <sequence>
                 <att name="class" flags="l">
                  <fn name="concat">
                   <str val="line indent"/>
                   <convert from="xs:integer" to="xs:string">
                    <arith op="+" calc="i+i">
                     <arith op="*" calc="i*i">
                      <fn line="55" name="string-length">
                       <fn name="replace">
                        <varRef name="indent" slot="0"/>
                        <str val=" "/>
                        <str val=""/>
                        <str val=""/>
                       </fn>
                      </fn>
                      <int val="3"/>
                     </arith>
                     <fn line="53" name="string-length">
                      <fn name="replace">
                       <varRef name="indent" slot="0"/>
                       <str val="\t"/>
                       <str val=""/>
                       <str val=""/>
                      </fn>
                     </fn>
                    </arith>
                   </convert>
                  </fn>
                 </att>
                 <callT line="58" name="spill-out" bSlot="1">
                  <withParam name="Q{}spilling" flags="c" as="xs:string">
                   <fn line="59" name="string">
                    <dot/>
                   </fn>
                  </withParam>
                 </callT>
                </sequence>
               </elem>
              </let>
             </forEach>
            </sequence>
           </elem>
          </choose>
         </forEachGroup>
        </forEach>
       </sequence>
      </elem>
     </resultDoc>
     <applyT line="72" mode="Q{}off" bSlot="2">
      <fn role="select" name="id">
       <str val="tweak_panel"/>
      </fn>
     </applyT>
     <applyT line="73" mode="Q{}on" bSlot="3">
      <fn role="select" name="id">
       <str val="tell_panel"/>
      </fn>
     </applyT>
     <applyT line="76" mode="Q{}spill" flags="t" bSlot="4">
      <docOrder role="select" intra="1">
       <slash>
        <docOrder intra="1">
         <slash>
          <fn name="id">
           <str val="tell_panel"/>
          </fn>
          <first>
           <axis name="descendant" nodeTest="text()" jsTest="return item.nodeType===3;"/>
          </first>
         </slash>
        </docOrder>
        <axis name="parent" nodeTest="(document-node()|element())" jsTest="return SaxonJS.U.isNode(item) &amp;&amp; (item.nodeType===9||item.nodeType===11||item.nodeType===1);"/>
       </slash>
      </docOrder>
     </applyT>
    </sequence>
   </templateRule>
   <templateRule prec="0" prio="0.5" seq="0" rank="0" minImp="0" slots="0" flags="s" line="38" module="file:/home/wendell/public_html/XMLjellysandwich/docs/Versifier/poem-teller.xsl">
    <p.nodeSet role="match" type="element()">
     <fn baseUri="file:/home/wendell/public_html/XMLjellysandwich/docs/Versifier/poem-teller.xsl" ns="xsl=~ XJS=http://github.com/wendellpiez/XMLjellysandwich ixsl=~ xs=~" line="38" name="id">
      <str val="text_select"/>
     </fn>
    </p.nodeSet>
    <applyT role="action" baseUri="file:/home/wendell/public_html/XMLjellysandwich/docs/Versifier/poem-teller.xsl" ns="xsl=~ XJS=http://github.com/wendellpiez/XMLjellysandwich ixsl=~ xs=~" line="39" mode="Q{}switch-in" flags="t" bSlot="5">
     <fn role="select" name="id">
      <str val="text_panel"/>
     </fn>
    </applyT>
   </templateRule>
   <templateRule prec="0" prio="0.5" seq="3" rank="0" minImp="0" slots="0" flags="s" line="84" module="file:/home/wendell/public_html/XMLjellysandwich/docs/Versifier/poem-teller.xsl">
    <p.withPredicate role="match">
     <p.nodeTest test="element(Q{}code)" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1 &amp;&amp; q.uri===''&amp;&amp;q.local==='code';"/>
     <gc baseUri="file:/home/wendell/public_html/XMLjellysandwich/docs/Versifier/poem-teller.xsl" ns="xsl=~ XJS=http://github.com/wendellpiez/XMLjellysandwich ixsl=~ xs=~" line="84" op="=" card="1:1" comp="CCC">
      <attVal name="Q{}class" chk="0"/>
      <str val="button"/>
     </gc>
    </p.withPredicate>
    <applyT role="action" baseUri="file:/home/wendell/public_html/XMLjellysandwich/docs/Versifier/poem-teller.xsl" ns="xsl=~ XJS=http://github.com/wendellpiez/XMLjellysandwich ixsl=~ xs=~" line="85" mode="Q{http://saxonica.com/ns/interactiveXSLT}click" flags="t" bSlot="6">
     <fn role="select" name="key">
      <str val="button-by-label"/>
      <fn name="string">
       <dot type="element(Q{}code)"/>
      </fn>
     </fn>
    </applyT>
   </templateRule>
  </mode>
 </co>
 <co id="2" binds="">
  <mode name="Q{}on" onNo="TC" flags="W" patternSlots="0">
   <templateRule prec="0" prio="-0.5" seq="0" rank="0" minImp="0" slots="0" flags="s" line="272" module="file:/home/wendell/public_html/XMLjellysandwich/docs/Versifier/poem-teller.xsl">
    <p.nodeTest role="match" test="element()" jsTest="return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1;"/>
    <ifCall role="action" baseUri="file:/home/wendell/public_html/XMLjellysandwich/docs/Versifier/poem-teller.xsl" ns="xsl=~ XJS=http://github.com/wendellpiez/XMLjellysandwich ixsl=~ xs=~" line="274" name="Q{http://saxonica.com/ns/interactiveXSLT}set-attribute" type="item()*">
     <str val="class"/>
     <fn name="string-join">
      <sequence>
       <filter flags="b">
        <fn name="tokenize">
         <cvUntyped to="xs:string">
          <attVal name="Q{}class" chk="0"/>
         </cvUntyped>
         <str val="\s+"/>
         <str val=""/>
        </fn>
        <vc op="ne" onEmpty="1" comp="CCC">
         <dot type="xs:string"/>
         <str val="ON"/>
        </vc>
       </filter>
       <str val="ON"/>
      </sequence>
      <str val=" "/>
     </fn>
    </ifCall>
   </templateRule>
  </mode>
 </co>
 <co id="4" binds="6 3 4">
  <mode name="Q{}spill" onNo="TC" flags="W" patternSlots="0">
   <templateRule prec="0" prio="0.5" seq="2" rank="2" minImp="0" slots="0" flags="s" line="144" module="file:/home/wendell/public_html/XMLjellysandwich/docs/Versifier/poem-teller.xsl">
    <p.withPredicate role="match">
     <p.nodeTest test="element()" jsTest="return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1;"/>
     <fn baseUri="file:/home/wendell/public_html/XMLjellysandwich/docs/Versifier/poem-teller.xsl" ns="xsl=~ XJS=http://github.com/wendellpiez/XMLjellysandwich ixsl=~ xs=~" line="144" name="empty">
      <filter flags="b">
       <axis name="ancestor-or-self" nodeTest="element()" jsTest="return item.nodeType===1;"/>
       <fn name="contains-token">
        <cvUntyped to="xs:string">
         <attVal name="Q{}class" chk="0"/>
        </cvUntyped>
        <str val="verse"/>
       </fn>
      </filter>
     </fn>
    </p.withPredicate>
    <empty role="action"/>
   </templateRule>
   <templateRule prec="0" prio="-0.2" seq="0" rank="1" minImp="0" slots="1" flags="s" line="124" module="file:/home/wendell/public_html/XMLjellysandwich/docs/Versifier/poem-teller.xsl">
    <p.nodeTest role="match" test="element()" jsTest="return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1;"/>
    <let role="action" baseUri="file:/home/wendell/public_html/XMLjellysandwich/docs/Versifier/poem-teller.xsl" ns="xsl=~ XJS=http://github.com/wendellpiez/XMLjellysandwich ixsl=~ xs=~" line="125" var="pause" as="document-node()" slot="0" eval="7">
     <doc line="126" base="file:/home/wendell/public_html/XMLjellysandwich/docs/Versifier/poem-teller.xsl" validation="preserve">
      <applyT mode="Q{}pause" bSlot="0">
       <dot role="select" type="element()"/>
      </applyT>
     </doc>
     <ifCall line="132" name="Q{http://saxonica.com/ns/interactiveXSLT}schedule-action" type="item()*">
      <arith line="130" op="+" calc="i+i">
       <cast as="xs:integer" emptiable="0">
        <arith op="*" calc="d*d">
         <cvUntyped to="xs:double">
          <data>
           <varRef name="pause" slot="0"/>
          </data>
         </cvUntyped>
         <dbl val="360"/>
        </arith>
       </cast>
       <int val="1"/>
      </arith>
      <empty/>
      <callT line="133" name="show" bSlot="1"/>
     </ifCall>
    </let>
   </templateRule>
   <templateRule prec="0" prio="-0.5" seq="1" rank="0" minImp="0" slots="0" flags="s" line="139" module="file:/home/wendell/public_html/XMLjellysandwich/docs/Versifier/poem-teller.xsl">
    <p.nodeTest role="match" test="( element() | text() | comment() | processing-instruction() )" jsTest="return SaxonJS.U.isNode(item) &amp;&amp; (item.nodeType===1 || item.nodeType===3 || item.nodeType===7 || item.nodeType===8);"/>
    <applyT role="action" baseUri="file:/home/wendell/public_html/XMLjellysandwich/docs/Versifier/poem-teller.xsl" ns="xsl=~ XJS=http://github.com/wendellpiez/XMLjellysandwich ixsl=~ xs=~" line="140" mode="Q{}spill" flags="t" bSlot="2">
     <first role="select">
      <union op="|">
       <axis name="child" nodeTest="node()" jsTest="return SaxonJS.U.isNode(item);"/>
       <axis name="following" nodeTest="node()" jsTest="return SaxonJS.U.isNode(item);"/>
      </union>
     </first>
    </applyT>
   </templateRule>
  </mode>
 </co>
 <co id="10" binds="7">
  <template name="Q{}xmljellysandwich_pack" flags="os" line="30" module="file:/home/wendell/public_html/XMLjellysandwich/docs/Versifier/poem-teller.xsl" slots="0">
   <resultDoc role="body" baseUri="file:/home/wendell/public_html/XMLjellysandwich/docs/Versifier/poem-teller.xsl" ns="xsl=~ XJS=http://github.com/wendellpiez/XMLjellysandwich ixsl=~ xs=~" line="31" global="#&#xA;#Fri Aug 17 21:31:48 EDT 2018&#xA;" local="#&#xA;#Fri Aug 17 21:31:48 EDT 2018&#xA;">
    <str role="href" val="#teller-css"/>
    <callT role="content" line="32" name="css" bSlot="0"/>
   </resultDoc>
  </template>
 </co>
 <co id="9" binds="5 5">
  <template name="Q{}spill-out" flags="os" line="102" module="file:/home/wendell/public_html/XMLjellysandwich/docs/Versifier/poem-teller.xsl" slots="1">
   <sequence role="body" baseUri="file:/home/wendell/public_html/XMLjellysandwich/docs/Versifier/poem-teller.xsl" ns="xsl=~ XJS=http://github.com/wendellpiez/XMLjellysandwich ixsl=~ xs=~" line="103">
    <param name="Q{}spilling" slot="0" flags="i" as="xs:string">
     <treat role="conversion" as="xs:string" jsTest="return SaxonJS.U.Atomic.string.matches(item);" diag="8|0|XTTE0590|spilling">
      <check card="1" diag="8|0|XTTE0590|spilling">
       <cvUntyped to="xs:string">
        <data>
         <supplied slot="0"/>
        </data>
       </cvUntyped>
      </check>
     </treat>
    </param>
    <analyzeString line="105">
     <varRef role="select" name="spilling" slot="0"/>
     <fn role="regex" name="concat">
      <str val="[^"/>
      <gVarRef name="Q{}terminalchars" bSlot="0"/>
      <str val="]*["/>
      <gVarRef name="Q{}terminalchars" bSlot="1"/>
      <str val="]"/>
     </fn>
     <str role="flags" val=""/>
     <elem role="matching" line="107" name="span" nsuri="">
      <sequence>
       <att name="class" flags="l">
        <str val="phr hide"/>
       </att>
       <valueOf line="108" flags="l">
        <dot type="xs:string"/>
       </valueOf>
      </sequence>
     </elem>
     <elem role="nonMatching" line="112" name="span" nsuri="">
      <sequence>
       <att name="class" flags="l">
        <str val="phr hide"/>
       </att>
       <valueOf line="113" flags="l">
        <dot type="xs:string"/>
       </valueOf>
      </sequence>
     </elem>
    </analyzeString>
   </sequence>
  </template>
 </co>
 <co id="1" binds="">
  <mode name="Q{}off" onNo="TC" flags="W" patternSlots="0">
   <templateRule prec="0" prio="-0.5" seq="0" rank="0" minImp="0" slots="0" flags="s" line="266" module="file:/home/wendell/public_html/XMLjellysandwich/docs/Versifier/poem-teller.xsl">
    <p.nodeTest role="match" test="element()" jsTest="return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1;"/>
    <ifCall role="action" baseUri="file:/home/wendell/public_html/XMLjellysandwich/docs/Versifier/poem-teller.xsl" ns="xsl=~ XJS=http://github.com/wendellpiez/XMLjellysandwich ixsl=~ xs=~" line="269" name="Q{http://saxonica.com/ns/interactiveXSLT}set-attribute" type="item()*">
     <str val="class"/>
     <fn name="string-join">
      <filter flags="b">
       <fn name="tokenize">
        <cvUntyped to="xs:string">
         <attVal name="Q{}class" chk="0"/>
        </cvUntyped>
        <str val="\s+"/>
        <str val=""/>
       </fn>
       <vc op="ne" onEmpty="1" comp="CCC">
        <dot type="xs:string"/>
        <str val="ON"/>
       </vc>
      </filter>
      <str val=" "/>
     </fn>
    </ifCall>
   </templateRule>
  </mode>
 </co>
 <co id="11" binds="">
  <mode onNo="TC" flags="dW" patternSlots="0">
   <templateRule prec="0" prio="0.0" seq="0" rank="0" minImp="0" slots="0" flags="s" line="120" module="file:/home/wendell/public_html/XMLjellysandwich/docs/Versifier/poem-teller.xsl">
    <p.nodeTest role="match" test="attribute(Q{}pause)" jsTest="return SaxonJS.U.isAttr(item) &amp;&amp; item.name==='pause'"/>
    <att role="action" baseUri="file:/home/wendell/public_html/XMLjellysandwich/docs/Versifier/poem-teller.xsl" ns="xsl=~ XJS=http://github.com/wendellpiez/XMLjellysandwich ixsl=~ xs=~" line="121" name="data-pause">
     <convert from="xs:untypedAtomic" to="xs:string">
      <data>
       <dot type="attribute(Q{}pause)"/>
      </data>
     </convert>
    </att>
   </templateRule>
  </mode>
 </co>
 <overridden/>
 <key name="Q{}button-by-label" line="28" module="file:/home/wendell/public_html/XMLjellysandwich/docs/Versifier/poem-teller.xsl" binds="" flags="u">
  <p.nodeTest test="element(Q{}button)" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1 &amp;&amp; q.uri===''&amp;&amp;q.local==='button';"/>
  <fn baseUri="file:/home/wendell/public_html/XMLjellysandwich/docs/Versifier/poem-teller.xsl" ns="xsl=~ XJS=http://github.com/wendellpiez/XMLjellysandwich ixsl=~ xs=~" line="28" name="string">
   <dot type="element(Q{}button)"/>
  </fn>
 </key>
 <key name="Q{}input-by-name" line="26" module="file:/home/wendell/public_html/XMLjellysandwich/docs/Versifier/poem-teller.xsl" binds="" flags="u">
  <p.nodeTest test="element(Q{}input)" jsTest="var q=SaxonJS.U.nameOfNode(item); return SaxonJS.U.isNode(item) &amp;&amp; item.nodeType===1 &amp;&amp; q.uri===''&amp;&amp;q.local==='input';"/>
  <attVal baseUri="file:/home/wendell/public_html/XMLjellysandwich/docs/Versifier/poem-teller.xsl" ns="xsl=~ XJS=http://github.com/wendellpiez/XMLjellysandwich ixsl=~ xs=~" line="26" name="Q{}name" chk="0"/>
 </key>
 <output>
  <property name="{http://saxon.sf.net/}stylesheet-version" value="30"/>
 </output>
 <decimalFormat/>
</package>
<?Σ da31b1ef?>
