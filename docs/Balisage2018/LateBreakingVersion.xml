<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="balisage-proceedings-html.xsl"?>
<?xml-stylesheet type="text/css" href="../../../../Documents/Balisage/lib/balisage-author.css" title="Forms interface" alternate="no"?>
<?xml-model href="../../../../Documents/Balisage/lib/balisage-1-3.rng" type="application/xml" schematypens="http://relaxng.org/ns/structure/1.0"?>
<article xmlns="http://docbook.org/ns/docbook" version="5.0-subset Balisage-1.3"
    xml:id="HR-23632987-8973" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
    <title>HTML Typescript: Evolution and Revolution</title>
    <info>
        <abstract>
            <para>By HTML Typescript, we mean an application of a loosely structured, presentational
                HTML used to represent works early in the editorial phase of the publishing
                lifecycle. Its virtue, oddly, is in its imperfection, its not-readiness, since in
                its mess it can faithfully represent (for example) the otherwise-illegible mess
                created by authors in their Word documents. In doing so, it opens up the logic of
                the conversion process – something otherwise very difficult to expose. This might
                have surprising consequences.</para>
        </abstract>
        <author>
            <personname>
                <firstname>Adam </firstname>
                <surname>Hyde</surname>
            </personname>
            <personblurb>
                <para>Adam Hyde is co-founder and organizer of the Coko Foundation, and has
                    developed several end-to-end electronic publishing systems including web-based
                    systems.</para>
            </personblurb>
        </author>

    </info>
    <section>

        <title>Publishers and their problems</title>
        
        <para>I deal with publishers everyday that are suffering the pain caused by file
            attachments. MS Word, being the primary transport of manuscripts between author and
            publisher, publisher and reviewer, is a post-digital paper artifact. It has been
            designed to leverage your laptop as a typewriter, to map one-to-one into material paper
            form, to be e(mailed) from one place to another, to preserve temporal proprietaryship
            where there is only one source of truth at any one moment and it exists in a Folder, on
            someones Desktop.</para>
        <para>The pain caused by this just-like-paper digital format is that it comes with all the
            issues that the paper world suffered from. Who has the paper? Where is it? Is it the
            latest copy? How do I copy the changes from here to there? Who changed what and when?
            Does anyone know if it has even been looked at? And finally... how can I get the
            document onto the web?</para>
        <para>So, publishers spend a lot of time chasing people to find out where a document is and
            at what stage. They then wrangle disparate copies into a single version, hoping they
            have all the latest changes from everyone, and then they send it off to an external
            vendor to put it online. Since MS Word has obviously tried so very hard to maintain the
            paper paradigm, why don’t we reward them and acknowledge they have succeeded.... MS Word
            is exactly like paper. Congratulations.</para>
        <para>So... when publishers come to me and the good folks at Coko they come with hope we can
            help them fix their problems. They are all under pressure to optimise, they want to get
            information out to the world quicker, they want to reduce costs. My role is to tease out
            the core problem and the core problem is always MS Word. </para>
        <para>You may think this is over stating the problem. MS Word is just a format, how can it
            be the root of publishing workflow problems? Well, it is like that old old story about
            the stone in the shoe... what problems can a small stone in a shoe cause? Afterall, its
            just a small stone, a nuisance. However, if you don’t remove the stone what happens? You
            learn to put up with it. You learn to walk differently. You learn to acomodate the pain,
            but sooner or later your entire system is altered inorder to compensate. The way you
            walk, how you balance yourself, how much you favour one leg over the other etc etc ...
            all because of this small root problem.</para>
        <para>That is exactly analogous to publishing and MS Word. Authors put a stone in the shoe
            of the publisher - MS Word - and the publisher alters their whole system to accommodate
            it. Except in this case the researcher and the publisher blame each other, both say the
            other prevents them from removing the stone... but thats another story...</para>
        <para>So publishers end up sending and chasing elusive digital paper artifacts around the
            world. Who has it? Which version is it? Where is it? When do I get it back? Have they
            even read it? etc. And there are the current ‘Manuscript Submission Systems’ designed to
            help, that are not workflow systems by any stretch of the imagination. They are data
            stores. What do they store? They store the answers, if you can get them, to questions
            like Who has it? Which version is it? Where is it? When do I get it back? Have they even
            read it? </para>
        <para>It is a dire situation. Fortunately publishers have found a way to solve this problem.
            They employ more staff. They employ more staff to send, track, and chase .. and, of
            course, record their actions in the datastore. Or, as is often the case, in a wiki
            somewhere because the datastore is owned by someone else, getting them to change it
            happens to be slow and expensive, and consequently they can’t store all of the
            information they need to track...but that is also another story...</para>
        <para>All this because, one might allegorically argue, someone once said that the 
                <citation linkend="bgquote1">Internet is not the information highway I
                imagine</citation>[1]...or, perhaps even more to the point - <citation
                linkend="bgquote2">allowing Office documents to be rendered very well by other
                peoples browsers is one of the most destructive things we could do to the company.
                We have to stop putting any effort into this and make sure that Office documents
                very well depends on PROPRIETARY IE capabilities</citation> ...which might creep a
            little outside of the scope of allegory.</para>
        <para>There you have it. Publishing is pretty much trapped by other peoples business models
            - vendors of Manuscript tracking systems, and Microsoft. They exist as a kind of ugly
            lichen - symbiotic parasites that co-exist by (the lack of) virtue of each other. Lets
            not also forget XML vendors, they are not so much a parasite as a necessary evil in this
            current system...but I’ll get to them...</para>
        <para>Publishers are not the only ones paying the price of these stones. Researchers and
            research institutions are literally paying the price as the costs are passed on to them
            by publishers. And finally, although it may sound grandiose, humanity is paying the
            price. If you believe that getting research out to the world is good for humanity, then
            I would imagine you would like to see that good expedited. That can most effectively be
            done if we remove MS Word from our publishing workflows.</para>
        <para>How do we do that? Well, find the stone and cast it away as soon as possible is the
            answer. If researchers believe Publishers require them to submit MS Word, and Publishers
            believe they can’t change author behaviour to use something other than MS Word then lets
            help them both. Lets take MS Word from the author and convert it to a format that
            resolves all of the above problems, so at least the workflow problems from submission on
            can be (radically) mitigated.</para>
        <para>What is that format? Well... before I get to that I want to get to one answer I often
            hear. Its the wrong answer but I hear it a lot. </para>
        
    </section>
    <section>
        <title>XML Daze</title>
        <para>So, imagine you are a transportation company. You transport goods from A to B. Its not
            a sexy job but it pays the bills. Then one day you have an idea. Packing shipping crates
            is a really time consuming job. It costs your customers a lot of money and it is a
            logistical nightmare for you. And yet, you need to do it over and over again. Its always
            the same, no one seems to know how to make it better. It’s grunt work.</para>
        <para>Your idea is unique. You call up one of your friendly manufacturers and you say...hey,
            what about making your product in the container instead of back in the factory. That way
            you don’t have to pack it into the container after production as it is already there!
            Magic! It reduces the time to pack the container and, as it happens, a lot of your
            logistical transport problems just go away. Even better if you could convince the
            supermarkets to forgo shelving and just have a parking lot full of containers for the
            shoppers to browse. But thats perhaps too visionary. One step at a time.</para>
        <para>Well... from a distance we can see a problem with this. Shipping containers do not
            make good factories. The process just cannot be contained within something that is
            designed purely for the transport of finished products. </para>
        <para>This is the problem with ‘XML thinking’. You should not push the requirements of the
            end-of-the-line transport back down into the process for production. It is a fundamental
            rule but XML advocates seem bent on breaking it. Their version goes like this....We need
            XML for transport. Unfortunately, making XML from unstructured documents is a pain. It
            is a logistical nightmare. So why not push the problem back down the line. Make it the
            publishers problem (that has already happened) and then, in turn, some publishers
            (feeling the pain of the process) think perhaps its a good idea to push the pain down
            the line even further - to the authors. Why don’t we get the authors to author in XML?
            Or at least to make changes in an XML document, rather than in an unstructured
            document.</para>
        <para>This thinking doesn’t work. </para>
        <para>First, Authors will not write in XML. Show me where this has caught on outside the
            realm of specialised technical writers. Even coders, structure fanatics in their own
            domain, don’t like this idea and tend to head in exactly the opposite direction towards
            even less structured documents (even though they call it ‘structured text’ this is
            something of a misnomer)for prose ie. markdown.</para>
        <para>Second, Authors, when they receive reviews from a publisher, often completely rewrite
            their manuscript. ‘XML thinking’ would require them to do this in XML. That is, they
            should feel free to scrub whatever parts of their document they don’t like, add new
            bits, re-order etc...as they paint a new, emergent, picture of their research...they are
            free to do all this as long as it does not destroy the structural integrity of the XML
            document. Madness. </para>
        <para>Documents in a state of flux need to be unstructured. They need to follow the ebb and
            flow of the researchers mind as the new narrative emerges. It is a messy process of cut
            and paste, cutting, rewriting, re-ordering...trying to preserve structure throughout
            this process violates the evolutionary nature of emergent processes, and places an
            unnecessary burden on the creator. Leave the author alone to reshape at will. </para>
        <para>Structured markup should not become their problem because publishers feel the pain.
            Publishers need to find a better way.</para>
        
    </section>
    <section>
        <title>XSweet</title>
        <para>Back to the original  question - how do we solve the problems created by MS Word? I
            believe first, we have to bring everyone into the web. Recently Tim O’Reilly joined our
            advisory board and asked what the killer app is for publishing in 2018? In other words,
            what is the ‘next big thing’ that will disrupt how scholarly publishing works. I had to
            say, sadly, that it was the web. Actually I am not sure I am right. I don’t think it
            will be 2018. It might be more like 2030. However, for the early adopters... you should
            embrace the web in all parts of your workflow, not just for distribution of finished
            content.</para>
        <para>Why? Well, for one... we need to get out of the desktop - paper paradigm and leverage
            the web for all that it has to offer. Notably, the efficiencies the web can bring for
            collaboration - which is actually what publishing is. It is a collaboration between
            authors, publishing staff, and reviewers to improve a document. This is the main value
            publishing, as a process, does vs just pushing publish and sending the content to your
            blog. It is what publishers do, even if they don’t use that lexicon.</para>
        <para>The web is the revolution for collaboration on documents. There is no other game in
            town. The old game in town is, generously, a (very slightly) re-imagined 1970s cubicle
            office; the re-imagining is so slight we can even use the same language.</para>
        <para>So, let's talk about how the web can improve the way publishers, authors, and
            reviewers work together. Well, the big improvement is that you can collaborate on the
            same document. It doesn’t mean that you are forced to work together on the same document
            at the same time, or that anyone can edit at anytime, but that there is one document
            that you can all access, edit and change at the regulated, right, moments. This means
            everyone knows what is going on and when and you can access the current version
            immediately. You know if someone has accessed a document and when. You know if the
            reviewer has checked in, if they have accepted the invite as soon as they accept, you
            know if an author has made a change, what they have changed, and when. The document and
            all that happens to it, in other words, completely transparent to you, the publisher. So
            this radically reduces the amount of track and chasing time required. You will at
            anytime know exactly who did what and when. </para>
        <para>To do this you need to bring your workflow into the web and to do that you need to
            bring your documents into the web. They must be first citizens of the web. Web native.
            They need to be HTML, the native format of the web. The native format for document
            collaboration of our time, the native format for the biggest network to ever exist - the
            web.</para>
        <para>This is why we created XSweet. XSweet translates content from docx to HTML. It is not
            the entire solution. It is merely a mechanism to translate from one format to the other.
            But it is the mechanism that casts away the stone. It is the tool that enables us to
            build efficient, healthy, workflows and get out of the painful, broken, paper-based
            workflows we use today. XSweet does one simple job - gets you out of paper and into the
            web. From docx to HTML.</para>
        <para>The rest of the system is a bigger story. HTML based workflows are where we need to
            be. XSweet is a conduit. That is all we need to understand for now.</para>
        
    </section>
    <section>
        <title>The Path to Structured Content</title>
        <para>I argue that your factory needs HTML at its core. This is because HTML is the language
            of the web. The web is built with ‘collaboration inside’ and it is the web that is going
            to bring you document and (consequently) process transparency, and the optimised
            workflows, and reduced costs you are after. </para>
        <para>So, how about that structured content? How do we get from this (by design)
            unstructured format docx to another unstructured format (HTML) to a structured format
            (XML). Well, interestingly... this path is not so difficult. If researchers are bent on
            using MS Word, let them do it... at the point of submission convert to HTML using
            XSweet. Then employ tools to add structure over time that will, at the push of a button
            and at the right moment, map the content and metadata into a structured XML file, as
            well as PDF and whatever else you require.</para>
        <para>Lets consider the first step. XSweet in its raw state converts faithfully from docx to
            HTML. This puts you in about the same position as having a messy docx file. They are
            both equivalently unstructured. So, (literally) no loss there. Additionally, at the time
            of conversion we can move from docx to HTML and make some ‘educated’ guesses as to what
            the author’s intent is. For example, if there is one single line text with ‘font size
            24, bold’ and then 16 of ‘font size 20, bold’ and 6 of ‘font size 14, bold’ and then a
            bunch of sentences groups with font size 12 – then we can map these to heading 1,2,3
            respectively, and the last being standard paragraphs. It is not perfect -it will not
            catch all structure, and the process will make incorrect inferences. However, it will
            get us part of the way there. So we can already start improving on the structure of the
            MS Word file automagically.</para>
        <para>Arguably, we are in a better position with an initial rules-based clean up of the file
            structure as it passes from docx to HTML. The good thing is that we can improve these
            rules over time. In time, the automated conversion will produce better results.</para>
        <para>After a conversion of this kind, we have a partially structured file. But with the
            HTML Typescript approach we see partially structured documents as a strength, not a
            weakness. We know it is not possible to get to perfectly formed documents in one go, so
            rather than consider this a fail we accept we must get there progressively. It is the
            use of HTML as a document format that can be progressively improved to get to the
            structure you desire over time using both machine and manual processes that makes HTML
            so powerful in this situation.</para>
        <para>HTML is the perfect format for this. HTML’s lack of formal structure, along with its
            ability to define any kind of structure you want, enables us to progressively add any
            kind of structure we need to a document. One part of this process is the automated clean
            up at conversion time, and the next part of the process is where it starts getting
            interesting… this is the manual application of structure.</para>
        <para>This is where the apparent weakness of HTML becomes a strength – we can manually add
            structure over time using tools that ‘clickers’ (a term coined by my friend Nokome
            Bentley) will find familiar - web based word processors. From there publishing is
            literally, a push of a button - we can preserve the internal HTML for delivery to the
            web, we can even easily wrap it in a HTML container like EPUB, convert it to PDF using
            the browser as a typesetting engine (see Pagedmedia.org), and we can very easily convert
            this to a first pass XML document, ready for QA - where the ‘coders’ (vs clickers) can
            use the tools of their own choice.</para>
        
    </section>
    <section>
        <title>A quick word about books</title>
        <para>Although much of this article is focused on journal manuscripts, the same problems
            exist in the book world. In the book world MS Word files are shuttled about in zip files
            and directories, or (in some cases) shared folders. They suffer the same problems caused
            by MS Word as the Journal world. There are some nuances that are worth noting. FIrst,
            book publishers have a page-proof stage (some Journals do also) where the author can
            check the content before it is rendered into PDF. So the content must first go into a
            InDesign (usually) workflow which means that there must be a managed shuttling
            back-and-forth of PDF for the author to comment on, leaving changes to be made
            downstream at the designers desktop. This also can be solved with HTML and typesetting
            in the browser so the author can see what a page proof looks like, in a single-source
            HTML environment, generated on the fly at a push of a button. Second, book publishing
            staff often clean up Word Files before the InDesign stage by using the MS Word software
            and custom macros to clean up the text. This means that if MS Word is upgraded they have
            to hire a macro programmer to update their custom code. It also means that only some
            computers (with the right version of MS Word and working macros) can be used for this
            job. This is also solved with an HTML environment where everyone has the same tools
            available through the browser. </para>
        <para>Finally, EPUB is becoming more important for academic publishers, especially for open
            access titles. Currently many academic publishers send PDF from an InDesign workflow to
            an external vendor to scrape the content and paste it into HTML files (the native
            internal format for EPUB). No joke. If book publishers could throw away docx and embrace
            the web, then the production of EPUB is also a push of the button (as it is with tools
            like Editoria, PressBooks, Booktype).</para>
        <para>Book publishers too, have a lot of pain caused by docx and MS Word and need to find a
            better way. XSweet conversion of docx to HTML is the gateway to a better workflow for
            them also.</para>
    </section>
    <section>
        <title>Is this the future or is this now?</title>
        <para>HTML as format can support all your needs as a publisher. The right tools are
            available now - sophisticated frameworks are available for editing in the browser (see
            for example ProseMIrror which is used by the New York Times and others). Typesetting
            HTML to print-ready PDF has been around for a long time (all of Hachettes trade paper
            books are typeset this way, many of which have won design awards). Conversion from clean
            HTML to XML can be managed pretty nicely and more cost effectively and quicker than docx
            to XML conversion. </para>
        <para>What we need is to first discard MS Word as early as possible in our workflows. XSweet
            then, while being a humble tool, is a gateway to better publishing workflows. Free your
            docs, and your workflow will follow...</para>
    </section>
    <bibliography>
        <title>Short bibliography</title>
        <bibliomixed xml:id="bgquote1"
                ><link>https://www.independent.co.uk/news/people/the-worst-things-bill-gates-ever-said-a6990046.html</link></bibliomixed>
        <bibliomixed xml:id="bgquote2"
                ><link>http://antitrust.slated.org/www.iowaconsumercase.org/011607/2000/PX02991.pdf</link></bibliomixed>
        <bibliomixed>Hyde, Adam. “HTML Typescript – redistributing labor.”
            https://www.adamhyde.net/typescript-redistributing-labor/</bibliomixed>
        <bibliomixed>Hyde, Adam. “Why HTML Typescript is a good idea.”
            https://www.adamhyde.net/why-html-typescript-is-a-good-idea/</bibliomixed>
        <bibliomixed>Piez, Wendell “HTML First? Testing an alternative approach to producing JATS
            from arbitrary (unconstrained or ‘wild’) .docx (WordML) format.” 2017.
            https://www.ncbi.nlm.nih.gov/books/NBK425546/</bibliomixed>
        <bibliomixed>Piez, Wendell. “Uphill to XML with XSLT, XProc … and HTML.” Balisage Series on
            Markup Technologies, vol. 20 (2017).
            https://doi.org/10.4242/BalisageVol20.Piez02</bibliomixed>
    </bibliography>



</article>
